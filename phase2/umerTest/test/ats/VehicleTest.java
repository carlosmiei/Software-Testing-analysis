/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 04 16:52:41 GMT 2018
 */
package ats;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.geom.Point2D;
import java.time.LocalDate;
import java.time.Month;
import java.time.Period;
import java.time.chrono.IsoChronology;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.evosuite.runtime.mock.java.time.chrono.MockIsoChronology;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class VehicleTest  {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      Point2D.Float point2D_Float0 = new Point2D.Float(267.24F, 267.24F);
      point2D_Double0.setLocation((Point2D) point2D_Float0);
      Car car0 = new Car("Y*", 229.212239453, point2D_Double0, "7e][5;POCfZoV");
      LocalDate localDate0 = MockLocalDate.now();
      Trip trip0 = new Trip(1, point2D_Double0, point2D_Double0, (Double) point2D_Double0.y, (Double) point2D_Double0.y, localDate0, "5lC.I|A(d+aC\"/er,", "q0wZS?nrBb<s", "Y*", (-3187), 75.0, point2D_Double0, (-1884.7075487), 184.0, 484.38661066);
      car0.addTrip(trip0);
      int int0 = car0.moneyGeneratedBetween(localDate0, localDate0);
      assertEquals(65.0, car0.getSpeed(), 0.01);
      assertEquals(4, car0.getSeats());
      assertEquals(267, int0);
      assertEquals(1.5, car0.getPrice(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      Point2D.Float point2D_Float0 = new Point2D.Float((-4178.8F), (-4178.8F));
      point2D_Double0.setLocation((Point2D) point2D_Float0);
      Car car0 = new Car("Y*", 229.212239453, point2D_Double0, "7e][5;POCfZoV");
      LocalDate localDate0 = MockLocalDate.now();
      Trip trip0 = new Trip(1, point2D_Double0, point2D_Double0, (Double) point2D_Double0.y, (Double) point2D_Double0.y, localDate0, "5lC.I|A(d+aC\"/er,", "q0wZS?nrBb<s", "Y*", (-3187), 75.0, point2D_Double0, (-1884.7075487), 184.0, 484.38661066);
      car0.addTrip(trip0);
      int int0 = car0.moneyGeneratedBetween(localDate0, localDate0);
      assertEquals(1.5, car0.getPrice(), 0.01);
      assertEquals((-4178), int0);
      assertEquals(4, car0.getSeats());
      assertEquals(65.0, car0.getSpeed(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double(8.5, (-1.0));
      Bike bike0 = new Bike("R/Xmf%7psKClpx)Zi7", 591.11296, point2D_Double0, "\nMatr\u00EDcula ve\u00EDculo : ");
      bike0.setAvailable(false);
      boolean boolean0 = bike0.isAvailable();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      Bike bike0 = new Bike("\nNumero de lugares: ", (-572.61883), point2D_Double0, "");
      bike0.setSpeed(0.0);
      double double0 = bike0.getSpeed();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double(110.0, 1187.567);
      Helicopter helicopter0 = new Helicopter("\u00BA lugar :", 2.0, point2D_Double0, "\u00BA lugar :");
      helicopter0.setSpeed((-2320.2));
      double double0 = helicopter0.getSpeed();
      assertEquals((-2320.2), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double(927.8341, 927.8341);
      Van van0 = new Van("\nEmail cliente : ", 927.8341, point2D_Double0, "F");
      van0.setSeats(0);
      int int0 = van0.getSeats();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      Van van0 = new Van("7n'di#Ec`_wM{l$,", 0.0, point2D_Double0, "7n'di#Ec`_wM{l$,");
      double double0 = van0.getReliable();
      assertEquals(9, van0.getSeats());
      assertEquals(1.9, van0.getPrice(), 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(55.0, van0.getSpeed(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double((-1663.266), 1.0);
      Van van0 = new Van("iy`", (-1831.115), point2D_Double0, "iy`");
      double double0 = van0.getReliable();
      assertEquals(9, van0.getSeats());
      assertEquals((-1831.115), double0, 0.01);
      assertEquals(1.9, van0.getPrice(), 0.01);
      assertEquals(55.0, van0.getSpeed(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      Car car0 = new Car("", 3600.0, point2D_Double0, "");
      car0.setPrice(0.0);
      double double0 = car0.getPrice();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double(1.0, 0.0);
      Car car0 = new Car("*c?}|F", 0.0, point2D_Double0, "*c?}|F");
      car0.setPrice((-1.0));
      double double0 = car0.getPrice();
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      Car car0 = new Car((String) null, 2126.196576, point2D_Double0, (String) null);
      car0.getOwner();
      assertEquals(1.5, car0.getPrice(), 0.01);
      assertEquals(65.0, car0.getSpeed(), 0.01);
      assertEquals(4, car0.getSeats());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double((-1255.3838061623), 0.0);
      Helicopter helicopter0 = new Helicopter("\")6!", 352.1045479843041, point2D_Double0, "\")6!");
      helicopter0.getOwner();
      assertEquals(8.5, helicopter0.getPrice(), 0.01);
      assertEquals(3, helicopter0.getSeats());
      assertEquals(110.0, helicopter0.getSpeed(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      Bike bike0 = new Bike((String) null, 0.0, point2D_Double0, (String) null);
      bike0.getLicencePlate();
      assertEquals(0.9, bike0.getPrice(), 0.01);
      assertEquals(1, bike0.getSeats());
      assertEquals(75.0, bike0.getSpeed(), 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double(3600.0, (-1546.81128));
      Car car0 = new Car("", (-1546.81128), point2D_Double0, "9hTP=(SUX");
      car0.getLicencePlate();
      assertEquals(4, car0.getSeats());
      assertEquals(1.5, car0.getPrice(), 0.01);
      assertEquals(65.0, car0.getSpeed(), 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      Car car0 = new Car("", 3600.0, point2D_Double0, "");
      Bike bike0 = new Bike(";%bPRx&`gU]:i", 3600.0, point2D_Double0, ";%bPRx&`gU]:i");
      car0.equals((Vehicle) bike0);
      assertEquals(0.9, bike0.getPrice(), 0.01);
      assertEquals(1, bike0.getSeats());
      assertEquals(75.0, bike0.getSpeed(), 0.01);
      assertEquals(4, car0.getSeats());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double(1.0, 0.0);
      Car car0 = new Car("*c?}|F", 0.0, point2D_Double0, "*c?}|F");
      Vehicle vehicle0 = car0.clone();
      assertEquals(4, vehicle0.getSeats());
      assertEquals(65.0, vehicle0.getSpeed(), 0.01);
      assertEquals(1.5, vehicle0.getPrice(), 0.01);
      assertEquals(0.0, car0.getReliable(), 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      Van van0 = new Van((String) null, (-3746.8277534467206), point2D_Double0, "");
      Vehicle vehicle0 = van0.clone();
      assertEquals(9, vehicle0.getSeats());
      assertEquals((-3746.8277534467206), van0.getReliable(), 0.01);
      assertEquals(1.9, vehicle0.getPrice(), 0.01);
      assertEquals(55.0, vehicle0.getSpeed(), 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double((-2481.0), 0.0);
      Bike bike0 = new Bike("8\".=8\"31Bm*?X\"]_e", 1.0, point2D_Double0, "8\".=8\"31Bm*?X\"]_e");
      Vehicle vehicle0 = bike0.clone();
      assertEquals(1, vehicle0.getSeats());
      assertEquals(0.9, vehicle0.getPrice(), 0.01);
      assertEquals(75.0, vehicle0.getSpeed(), 0.01);
      assertEquals(1.0, bike0.getReliable(), 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      Car car0 = new Car("", 3600.0, point2D_Double0, "");
      Bike bike0 = new Bike(";%bPRx&`gU]:i", 3600.0, point2D_Double0, ";%bPRx&`gU]:i");
      HashMap<String, ArrayList<Point2D.Double>> hashMap0 = car0.getQueueInfo();
      hashMap0.put("1\u00BA lugar :\n", (ArrayList<Point2D.Double>) null);
      // Undeclared exception!
      try { 
        bike0.setQueueInfo(hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
//         verifyException("Vehicle", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      Car car0 = new Car("Y*", 229.212239453, point2D_Double0, "7e][5;POCfZoV");
      // Undeclared exception!
      try { 
        car0.setPosition((Point2D.Double) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
//         verifyException("Vehicle", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      Car car0 = new Car("Y*", 229.212239453, point2D_Double0, "7e][5;POCfZoV");
      LocalDate localDate0 = MockLocalDate.now();
      Trip trip0 = new Trip(1, point2D_Double0, point2D_Double0, (Double) point2D_Double0.y, (Double) point2D_Double0.y, localDate0, "5lC.I|A(d+aC\"/er,", "q0wZS?nrBb<s", "Y*", (-3187), 75.0, point2D_Double0, (-1884.7075487), 184.0, 484.38661066);
      car0.addTrip(trip0);
      // Undeclared exception!
      try { 
        car0.moneyGeneratedBetween((LocalDate) null, localDate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.time.chrono.ChronoLocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      Bike bike0 = new Bike("\nFator de fiabilidade : ", (-1941.21815), point2D_Double0, ".HO^d<&}*Y:");
      // Undeclared exception!
      try { 
        bike0.equals((Vehicle) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
        // verifyException("Vehicle", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double((-1.0), (-1.0));
      Bike bike0 = new Bike("'V}a", (-1.0), point2D_Double0, (String) null);
      Trip trip0 = new Trip();
      bike0.addTrip(trip0);
      // Undeclared exception!
      try { 
        bike0.clone();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
//         verifyException("Trip", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double(4805.47688, (-4706.7268));
      Car car0 = new Car((String) null, 4805.47688, point2D_Double0, (String) null);
      // Undeclared exception!
      try { 
        car0.addTrip((Trip) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
//         verifyException("Vehicle", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      Car car0 = new Car("Y*", 229.212239453, point2D_Double0, "7e][5;POCfZoV");
      // Undeclared exception!
      try { 
        car0.addClient("Tipo : ", point2D_Double0, (Point2D.Double) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
//         verifyException("Vehicle", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double((-1.0), (-1.0));
      Bike bike0 = new Bike("'V}a", (-1.0), point2D_Double0, (String) null);
      String string0 = bike0.printQueue();
      assertEquals(1, bike0.getSeats());
      assertEquals("Fila de espera vazia.", string0);
      assertEquals(75.0, bike0.getSpeed(), 0.01);
      assertEquals(0.9, bike0.getPrice(), 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double((-619.31171), (-619.31171));
      Van van0 = new Van("C+\"-L@$B*8", (-619.31171), point2D_Double0, "");
      ArrayList<Trip> arrayList0 = new ArrayList<Trip>();
      Trip trip0 = new Trip();
      arrayList0.add(trip0);
      // Undeclared exception!
      try { 
        van0.setTrips(arrayList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
//         verifyException("Trip", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double((-619.31171), (-619.31171));
      Van van0 = new Van("C+\"-L@$B*8", (-619.31171), point2D_Double0, "");
      ArrayList<Trip> arrayList0 = new ArrayList<Trip>();
      van0.setTrips(arrayList0);
      assertEquals(55.0, van0.getSpeed(), 0.01);
      assertEquals(9, van0.getSeats());
      assertEquals(1.9, van0.getPrice(), 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      Car car0 = new Car("", 3600.0, point2D_Double0, "");
      car0.setTrips((ArrayList<Trip>) null);
      assertEquals(1.5, car0.getPrice(), 0.01);
      assertEquals(4, car0.getSeats());
      assertEquals(65.0, car0.getSpeed(), 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      Car car0 = new Car("", 3600.0, point2D_Double0, "");
      car0.addClient("", point2D_Double0, point2D_Double0);
      Bike bike0 = new Bike(";%bPRx&`gU]:i", 3600.0, point2D_Double0, ";%bPRx&`gU]:i");
      HashMap<String, ArrayList<Point2D.Double>> hashMap0 = car0.getQueueInfo();
      bike0.setQueueInfo(hashMap0);
      assertEquals(75.0, bike0.getSpeed(), 0.01);
      assertEquals(1, hashMap0.size());
      assertEquals(1, bike0.getSeats());
      assertEquals(0.9, bike0.getPrice(), 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double((-1.0), (-1.0));
      Helicopter helicopter0 = new Helicopter("d@mC7fyY", (-1336.6), point2D_Double0, "d@mC7fyY");
      helicopter0.setQueueInfo((HashMap<String, ArrayList<Point2D.Double>>) null);
      assertEquals(3, helicopter0.getSeats());
      assertEquals(8.5, helicopter0.getPrice(), 0.01);
      assertEquals(110.0, helicopter0.getSpeed(), 0.01);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      Car car0 = new Car("(bmS(4X`X6Vn$@177\"=", 1.0, point2D_Double0, "(bmS(4X`X6Vn$@177\"=");
      LinkedList<String> linkedList0 = car0.getQueue();
      linkedList0.add("");
      car0.setQueue(linkedList0);
      assertEquals(65.0, car0.getSpeed(), 0.01);
      assertEquals(1.5, car0.getPrice(), 0.01);
      assertEquals(4, car0.getSeats());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double(0.0, 5245.7941);
      Car car0 = new Car((String) null, 0.0, point2D_Double0, (String) null);
      car0.setQueue((LinkedList<String>) null);
      assertEquals(4, car0.getSeats());
      assertEquals(65.0, car0.getSpeed(), 0.01);
      assertEquals(1.5, car0.getPrice(), 0.01);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      Bike bike0 = new Bike("MT`.80i}{S]nd", 1.5, point2D_Double0, (String) null);
      Period period0 = Period.of(1165, 3, 3);
      IsoChronology isoChronology0 = period0.getChronology();
      LocalDate localDate0 = MockIsoChronology.dateNow(isoChronology0);
      Trip trip0 = new Trip(3, point2D_Double0, point2D_Double0, (Double) point2D_Double0.x, (Double) point2D_Double0.x, localDate0, "", "x5sOKYE}^M5X['j.$;", "x5sOKYE}^M5X['j.$;", 9, 1.5, point2D_Double0, (-572.985958), 9, 0.0);
      bike0.addTrip(trip0);
      bike0.getTrips();
      assertEquals(1, bike0.getSeats());
      assertEquals(0.9, bike0.getPrice(), 0.01);
      assertEquals(75.0, bike0.getSpeed(), 0.01);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      Bike bike0 = new Bike("MT`.80i}{S]nd", 1.5, point2D_Double0, (String) null);
      bike0.getTrips();
      assertEquals(0.9, bike0.getPrice(), 0.01);
      assertEquals(75.0, bike0.getSpeed(), 0.01);
      assertEquals(1, bike0.getSeats());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      Car car0 = new Car((String) null, 0.0, point2D_Double0, (String) null);
      car0.addClient((String) null, point2D_Double0, point2D_Double0);
      LinkedList<String> linkedList0 = car0.getQueue();
      assertEquals(1, linkedList0.size());
      assertEquals(4, car0.getSeats());
      assertEquals(1.5, car0.getPrice(), 0.01);
      assertEquals(65.0, car0.getSpeed(), 0.01);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      Car car0 = new Car("", 3598.848328722385, point2D_Double0, "");
      car0.isAvailable();
      assertEquals(4, car0.getSeats());
      assertEquals(65.0, car0.getSpeed(), 0.01);
      assertEquals(1.5, car0.getPrice(), 0.01);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double((-1.0), (-1.0));
      Helicopter helicopter0 = new Helicopter("d@mC7fyY", (-1336.6), point2D_Double0, "d@mC7fyY");
      helicopter0.getPosition();
      assertEquals(3, helicopter0.getSeats());
      assertEquals(8.5, helicopter0.getPrice(), 0.01);
      assertEquals(110.0, helicopter0.getSpeed(), 0.01);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double((-1663.266), 1.0);
      Van van0 = new Van("iy`", (-1831.115), point2D_Double0, "iy`");
      van0.setSeats((-1));
      int int0 = van0.getSeats();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      Bike bike0 = new Bike("\nNumero de lugares: ", (-572.61883), point2D_Double0, "");
      bike0.getOwner();
      assertEquals(75.0, bike0.getSpeed(), 0.01);
      assertEquals(1, bike0.getSeats());
      assertEquals(0.9, bike0.getPrice(), 0.01);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      Car car0 = new Car("7n'di#Ec`_wM{l$,", 1.0, point2D_Double0, "n/j");
      car0.getLicencePlate();
      assertEquals(65.0, car0.getSpeed(), 0.01);
      assertEquals(4, car0.getSeats());
      assertEquals(1.5, car0.getPrice(), 0.01);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double((-2481.0), 0.0);
      Bike bike0 = new Bike("8\".=8\"31Bm*?X\"]_e", 1.0, point2D_Double0, "8\".=8\"31Bm*?X\"]_e");
      double double0 = bike0.getReliable();
      assertEquals(1.0, double0, 0.01);
      assertEquals(1, bike0.getSeats());
      assertEquals(75.0, bike0.getSpeed(), 0.01);
      assertEquals(0.9, bike0.getPrice(), 0.01);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      Car car0 = new Car("Y*", 229.677851822181, point2D_Double0, "Y*");
      LocalDate localDate0 = MockLocalDate.now();
      Trip trip0 = new Trip(1, point2D_Double0, point2D_Double0, (Double) 0.0, (Double) 0.0, localDate0, "Y*", "Y*", "Y*", 1, 0.0F, point2D_Double0, 1, 0.0F, 267.24F);
      car0.addTrip(trip0);
      int int0 = car0.moneyGeneratedBetween(localDate0, localDate0);
      assertEquals(4, car0.getSeats());
      assertEquals(1.5, car0.getPrice(), 0.01);
      assertEquals(65.0, car0.getSpeed(), 0.01);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      Car car0 = new Car("Y*", 229.677851822181, point2D_Double0, "Y*");
      LocalDate localDate0 = MockLocalDate.now();
      Trip trip0 = new Trip(1, point2D_Double0, point2D_Double0, (Double) 0.0, (Double) 0.0, localDate0, "Y*", "Y*", "Y*", 1, 0.0F, point2D_Double0, 1, 0.0F, 267.24F);
      car0.addTrip(trip0);
      LocalDate localDate1 = MockLocalDate.ofYearDay(1, 1);
      int int0 = car0.moneyGeneratedBetween(localDate1, localDate1);
      assertEquals(1.5, car0.getPrice(), 0.01);
      assertEquals(0, int0);
      assertEquals(65.0, car0.getSpeed(), 0.01);
      assertEquals(4, car0.getSeats());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      Car car0 = new Car("", 3598.848328722385, point2D_Double0, "");
      car0.addClient("", point2D_Double0, point2D_Double0);
      String string0 = car0.printQueue();
      assertEquals(65.0, car0.getSpeed(), 0.01);
      assertEquals("1\u00BA lugar :\n", string0);
      assertEquals(1.5, car0.getPrice(), 0.01);
      assertEquals(4, car0.getSeats());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double((-1.0), (-1.0));
      Bike bike0 = new Bike("'V}a", (-1.0), point2D_Double0, (String) null);
      String string0 = bike0.toString();
      //assertEquals("Tipo : class Bike\nMatricula : 'V}a\nVelocidade m\u00E9dia por km : 75.0\nPre\u00E7o m\u00E9dio por km : 0.9\nFator de fiabilidade : -1.0\nDisponibilidade : true\nNumero de lugares: 1\nPosi\u00E7\u00E3o : (-1.0,-1.0)\nOwner : null\n---------\nFila de Espera : \nFila de espera vazia.\n\n", string0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double((-2481.0), 0.0);
      Bike bike0 = new Bike("8\".=8\"31Bm*?X\"]_e", 1.0, point2D_Double0, "8\".=8\"31Bm*?X\"]_e");
      bike0.setLicencePlate((String) null);
      assertEquals(75.0, bike0.getSpeed(), 0.01);
      assertEquals(1, bike0.getSeats());
      assertEquals(0.9, bike0.getPrice(), 0.01);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      Helicopter helicopter0 = new Helicopter("?Velocidde m\u00E9dia por kl A ", 0.0, point2D_Double0, "?Velocidde m\u00E9dia por kl A ");
      double double0 = helicopter0.getPrice();
      assertEquals(3, helicopter0.getSeats());
      assertEquals(8.5, double0, 0.01);
      assertEquals(110.0, helicopter0.getSpeed(), 0.01);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      Car car0 = new Car("Y*", 229.677851822181, point2D_Double0, "Y*");
      int int0 = car0.getSeats();
      assertEquals(1.5, car0.getPrice(), 0.01);
      assertEquals(4, int0);
      assertEquals(65.0, car0.getSpeed(), 0.01);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      Bike bike0 = new Bike("", 3598.848328722385, point2D_Double0, "");
      bike0.removeClient("");
      assertEquals(0.9, bike0.getPrice(), 0.01);
      assertEquals(75.0, bike0.getSpeed(), 0.01);
      assertEquals(1, bike0.getSeats());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      Car car0 = new Car("", 3598.848328722385, point2D_Double0, "");
      car0.setOwner("");
      assertEquals(1.5, car0.getPrice(), 0.01);
      assertEquals(4, car0.getSeats());
      assertEquals(65.0, car0.getSpeed(), 0.01);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      Car car0 = new Car("Y*", 229.677851822181, point2D_Double0, "Y*");
      car0.setPosition(point2D_Double0);
      assertEquals(1.5, car0.getPrice(), 0.01);
      assertEquals(4, car0.getSeats());
      assertEquals(65.0, car0.getSpeed(), 0.01);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      Car car0 = new Car("", 3598.848328722385, point2D_Double0, "");
      double double0 = car0.getSpeed();
      assertEquals(4, car0.getSeats());
      assertEquals(1.5, car0.getPrice(), 0.01);
      assertEquals(65.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      Car car0 = new Car("", 3598.848328722385, point2D_Double0, "");
      Bike bike0 = new Bike("", 3598.848328722385, point2D_Double0, "");
      car0.equals((Vehicle) bike0);
      assertEquals(1, bike0.getSeats());
      assertEquals(0.9, bike0.getPrice(), 0.01);
      assertEquals(75.0, bike0.getSpeed(), 0.01);
      assertEquals(4, car0.getSeats());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double((-1.0), (-1.0));
      Bike bike0 = new Bike("'V}a", (-1.0), point2D_Double0, (String) null);
      Trip trip0 = new Trip();
      bike0.addTrip(trip0);
      Month month0 = Month.MAY;
      LocalDate localDate0 = MockLocalDate.of(1, month0, 1);
      int int0 = bike0.moneyGeneratedBetween(localDate0, localDate0);
      assertEquals(1, bike0.getSeats());
      assertEquals(0.9, bike0.getPrice(), 0.01);
      assertEquals(0, int0);
      assertEquals(75.0, bike0.getSpeed(), 0.01);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double((-2481.0), 0.0);
      Bike bike0 = new Bike("8\".=8\"31Bm*?X\"]_e", 1.0, point2D_Double0, "8\".=8\"31Bm*?X\"]_e");
      bike0.setReliable((-447.740018145282));
      assertEquals((-447.740018145282), bike0.getReliable(), 0.01);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Car car0 = null;
      try {
        car0 = new Car();
//        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }
}
