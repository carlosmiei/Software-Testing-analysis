/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 04 16:37:15 GMT 2018
 */

package ats;
import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.geom.Point2D;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)
public class VanTest  {

    @Test(timeout = 4000)
    public void test0()  throws Throwable  {
        Point2D.Double point2D_Double0 = new Point2D.Double();
        Van van0 = new Van("Van", 65.0, point2D_Double0, "Van");
        Van van1 = van0.clone();
        assertEquals(9, van1.getSeats());
        assertEquals(1.9, van1.getPrice(), 0.01);
        assertEquals(1.9, van0.getPrice(), 0.01);
        assertEquals(55.0, van0.getSpeed(), 0.01);
        assertEquals(9, van0.getSeats());
        assertEquals(55.0, van1.getSpeed(), 0.01);
    }

    @Test(timeout = 4000)
    public void test1()  throws Throwable  {
        Point2D.Double point2D_Double0 = new Point2D.Double();
        Van van0 = new Van("", (-3589.9085), point2D_Double0, "");
        Van van1 = van0.clone();
        assertEquals(1.9, van1.getPrice(), 0.01);
        assertEquals(55.0, van0.getSpeed(), 0.01);
        assertEquals(9, van1.getSeats());
        assertEquals(9, van0.getSeats());
        assertEquals(1.9, van0.getPrice(), 0.01);
        assertEquals(55.0, van1.getSpeed(), 0.01);
    }

    @Test(timeout = 4000)
    public void test2()  throws Throwable  {
        Point2D.Double point2D_Double0 = new Point2D.Double();
        Van van0 = new Van("ZfuE", 0.0, point2D_Double0, "ZfuE");
        Trip trip0 = new Trip();
        van0.addTrip(trip0);
        // Undeclared exception!
        try {
            van0.clone();
            fail("Expecting exception: NullPointerException");

        } catch(NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            ////verifyException("Trip", e);
        }
    }

    @Test(timeout = 4000)
    public void test3()  throws Throwable  {
        Van van0 = null;
        try {
            van0 = new Van("", 55.0, (Point2D.Double) null, "\nClassifica\u00E7\u00E3o : ");
            fail("Expecting exception: NullPointerException");

        } catch(NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //System
            System.out.println("Excepção!!: " + e);
            ////verifyException("java.lang.NullPointerException", e);
        }
    }

    @Test(timeout = 4000)
    public void test4()  throws Throwable  {
        Van van0 = null;
        try {
            van0 = new Van((Van) null);
            fail("Expecting exception: NullPointerException");

        } catch(NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            ////verifyException("java.lang.NullPointerException", e);
        }
    }

    @Test(timeout = 4000)
    public void test5()  throws Throwable  {
        Point2D.Double point2D_Double0 = new Point2D.Double();
        Van van0 = new Van("", (-3589.9085), point2D_Double0, "");
        Van van1 = new Van(van0);
        assertEquals(1.9, van0.getPrice(), 0.01);
        assertEquals(9, van1.getSeats());
        assertEquals(55.0, van0.getSpeed(), 0.01);
        assertEquals(9, van0.getSeats());
        assertEquals(1.9, van1.getPrice(), 0.01);
        assertEquals(55.0, van1.getSpeed(), 0.01);
    }

    @Test(timeout = 4000)
    public void test6()  throws Throwable  {
        Point2D.Double point2D_Double0 = new Point2D.Double();
        Van van0 = new Van("ZfuE", 0.0, point2D_Double0, "ZfuE");
        Van van1 = van0.clone();
        assertEquals(9, van0.getSeats());
        assertEquals(55.0, van1.getSpeed(), 0.01);
        assertEquals(55.0, van0.getSpeed(), 0.01);
        assertEquals(1.9, van1.getPrice(), 0.01);
        assertEquals(1.9, van0.getPrice(), 0.01);
        assertEquals(9, van1.getSeats());
    }

    @Test(timeout = 4000)
    public void test7()  throws Throwable  {
        Van van0 = null;
        try {
            van0 = new Van();
//        fail("Expecting exception: NullPointerException");

        } catch(NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }
}
