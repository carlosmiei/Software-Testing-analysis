/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 04 16:36:09 GMT 2018
 */

package ats;
import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.geom.Point2D;
import java.time.Clock;
import java.time.DateTimeException;
import java.time.LocalDate;
import java.time.Period;
import java.time.chrono.IsoChronology;
import java.util.ArrayList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockClock;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.evosuite.runtime.mock.java.time.chrono.MockIsoChronology;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ClientTest  {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Clock clock0 = MockClock.systemDefaultZone();
      LocalDate localDate0 = MockLocalDate.now(clock0);
      Point2D.Double point2D_Double0 = new Point2D.Double(0.0, (-1219.13501));
      ArrayList<Trip> arrayList0 = new ArrayList<Trip>();
      Client client0 = new Client("-X:U1<R", "", "", "", localDate0, point2D_Double0, 0.0, arrayList0, 4, (-1219.13501), true, "-X:U1<R");
      Trip trip0 = new Trip((-286), point2D_Double0, point2D_Double0, (Double) 860.0, (Double) point2D_Double0.y, localDate0, "", "#d'", "#d'", (-286), (-86.008201), point2D_Double0, (-1024.9738046209693), 160.5396296693953, 1);
      client0.addTrip(trip0);
      assertEquals((-605), client0.getPoints());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Clock clock0 = MockClock.systemUTC();
      LocalDate localDate0 = MockLocalDate.now(clock0);
      Client client0 = new Client("\nFila de espera : ", "\nFila de espera : ", ":6!;24V8I;", "\nFila de espera : ", localDate0);
      Point2D.Double point2D_Double0 = client0.getPosition();
      client0.setPosition(point2D_Double0);
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertFalse(client0.isPremium());
      assertEquals(0, client0.getPoints());
      assertEquals(0.0, point2D_Double0.x, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.ofEpochDay(1L);
      Client client0 = new Client("=>j|98>;!", "=>j|98>;!", "=>j|98>;!", "", localDate0);
      boolean boolean0 = client0.isPremium();
      assertEquals(0, client0.getPoints());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.ofEpochDay(1L);
      Client client0 = new Client((String) null, "", "\nTempo real at\u00E9 ao cliente : ", "(=0,E+ ", localDate0);
      client0.setQueue("");
      client0.getQueue();
      assertEquals(0, client0.getPoints());
      assertFalse(client0.isPremium());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Clock clock0 = MockClock.systemDefaultZone();
      LocalDate localDate0 = MockLocalDate.now(clock0);
      Point2D.Double point2D_Double0 = new Point2D.Double(0.0, (-1219.13501));
      ArrayList<Trip> arrayList0 = new ArrayList<Trip>();
      Client client0 = new Client("-X:U1<R", "", "", "", localDate0, point2D_Double0, 0.0, arrayList0, 4, (-1219.13501), true, "-X:U1<R");
      int int0 = client0.getPoints();
      assertTrue(client0.isPremium());
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Clock clock0 = MockClock.systemUTC();
      LocalDate localDate0 = MockLocalDate.now(clock0);
      Point2D.Double point2D_Double0 = new Point2D.Double();
      ArrayList<Trip> arrayList0 = new ArrayList<Trip>();
      Client client0 = new Client("}bySMmrQZA^DMywt/ ", "}bySMmrQZA^DMywt/ ", "", "", localDate0, point2D_Double0, 0.0, arrayList0, (-283), 0.0, false, "");
      int int0 = client0.getPoints();
      assertFalse(client0.isPremium());
      assertEquals((-283), int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.ofYearDay(0, 103);
      Point2D.Double point2D_Double0 = new Point2D.Double();
      Client client0 = new Client("6M`=%_%|5z]WUd z", "6M`=%_%|5z]WUd z", "", "6M`=%_%|5z]WUd z", localDate0, point2D_Double0, 0.0, (ArrayList<Trip>) null, 589, 589, true, "6M`=%_%|5z]WUd z");
      Client client1 = client0.clone();
      assertEquals(589, client0.getPoints());
      assertTrue(client1.isPremium());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Clock clock0 = MockClock.systemUTC();
      LocalDate localDate0 = MockLocalDate.now(clock0);
      Client client0 = new Client("\nFila de espera : ", "\nFila de espera : ", ":6!;24V8I;", "\nFila de espera : ", localDate0);
      Point2D.Double point2D_Double0 = client0.getPosition();
      Trip trip0 = new Trip((-1035), point2D_Double0, point2D_Double0, (Double) point2D_Double0.x, (Double) 0.0, localDate0, "Utilizador - \nFila de espera : \neMail : \nFila de espera : \nPassword : :6!;24V8I;\nMorada : \nFila de espera : \nData de nascimento : 2014-02-14\nDist\u00E2ncia Total : 0.0\nDinheiro gasto/ganho : 0.0\nN\u00FAmero de viagens :0\nPosi\u00E7\u00E3o : (2318.34,0.0)\nPontos : 0\nPremium : true\nFila de espera : null", "mykzr>m^JN4kY1S", "#S<", (-2117), 0.0, point2D_Double0, 2762.0, 0.0, 2318.34);
      client0.addTrip(trip0);
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertEquals(0.0, point2D_Double0.y, 0.01);
      
      Client client1 = client0.clone();
      assertEquals(0, client1.getPoints());
      assertFalse(client1.isPremium());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.now();
      Point2D.Double point2D_Double0 = new Point2D.Double();
      ArrayList<Trip> arrayList0 = new ArrayList<Trip>();
      Client client0 = new Client(",", "v", "v", "User", localDate0, point2D_Double0, 581.69487528, arrayList0, 0, 158.47839394459, true, "User");
      Client client1 = client0.clone();
      assertTrue(client1.isPremium());
      assertEquals(0, client1.getPoints());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.now();
      Point2D.Double point2D_Double0 = new Point2D.Double(0.0, 0.0);
      ArrayList<Trip> arrayList0 = new ArrayList<Trip>();
      Client client0 = new Client((String) null, (String) null, (String) null, (String) null, localDate0, point2D_Double0, (-1886.39863464291), arrayList0, (-2909), (-1886.39863464291), false, (String) null);
      Client client1 = client0.clone();
      assertEquals((-2909), client0.getPoints());
      assertFalse(client1.isPremium());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Period period0 = Period.of((-2643), (-1223), 4114);
      IsoChronology isoChronology0 = period0.getChronology();
      LocalDate localDate0 = MockIsoChronology.dateNow(isoChronology0);
      Client client0 = new Client((String) null, (String) null, (String) null, (String) null, localDate0);
      Trip trip0 = new Trip();
      client0.addTrip(trip0);
      // Undeclared exception!
      try { 
        client0.clone();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
          //  verifyException("Trip", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Clock clock0 = MockClock.systemUTC();
      LocalDate localDate0 = MockLocalDate.now(clock0);
      Point2D.Double point2D_Double0 = new Point2D.Double();
      ArrayList<Trip> arrayList0 = new ArrayList<Trip>();
      Client client0 = new Client("}bySMmrQZA^DMywt/ ", "}bySMmrQZA^DMywt/ ", "", "", localDate0, point2D_Double0, 0.0, arrayList0, (-283), 0.0, false, "");
      // Undeclared exception!
      try { 
        client0.addTrip((Trip) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
        // verifyException("User", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double(1863.93682, 1863.93682);
      ArrayList<Trip> arrayList0 = new ArrayList<Trip>();
      Client client0 = null;
      try {
        client0 = new Client("", "", "", "TW7", (LocalDate) null, point2D_Double0, 882.9201683852641, arrayList0, 0, (-146.417571596653), false, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
       //  verifyException("User", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Client client0 = null;
      try {
        client0 = new Client((String) null, (String) null, "PvB(w?!zFA&nM6a", "PvB(w?!zFA&nM6a", (LocalDate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
        // verifyException("User", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Client client0 = null;
      try {
        client0 = new Client((Client) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
//         verifyException("Client", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Clock clock0 = MockClock.systemDefaultZone();
      LocalDate localDate0 = MockLocalDate.now(clock0);
      Point2D.Double point2D_Double0 = new Point2D.Double(0.0, (-1219.13501));
      ArrayList<Trip> arrayList0 = new ArrayList<Trip>();
      Client client0 = new Client("-X:U1<R", "", "", "", localDate0, point2D_Double0, 0.0, arrayList0, 4, (-1219.13501), true, "-X:U1<R");
      Point2D.Double point2D_Double1 = client0.getPosition();
      Trip trip0 = new Trip((-286), point2D_Double0, point2D_Double1, (Double) 860.0, (Double) point2D_Double0.y, localDate0, "", "#d'", "#d'", (-286), (-86.008201), point2D_Double0, (-1024.9738046209693), 160.5396296693953, 1);
      client0.addTrip(trip0);
      assertEquals(1219.13501, client0.getTotalDistance(), 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.ofEpochDay(1212L);
      Point2D.Double point2D_Double0 = new Point2D.Double();
      ArrayList<Trip> arrayList0 = new ArrayList<Trip>();
      Client client0 = new Client("User", "User", "\nFila de espera : ", "", localDate0, point2D_Double0, 0.0, arrayList0, 0, 0.0, true, "3`uyMkP");
      boolean boolean0 = client0.isPremium();
      assertTrue(boolean0);
      assertEquals(0, client0.getPoints());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Clock clock0 = MockClock.systemDefaultZone();
      LocalDate localDate0 = MockLocalDate.now(clock0);
      Point2D.Double point2D_Double0 = new Point2D.Double(0.0, (-1219.13501));
      ArrayList<Trip> arrayList0 = new ArrayList<Trip>();
      Client client0 = new Client("-X:U1<R", "", "", "", localDate0, point2D_Double0, 0.0, arrayList0, 4, (-1219.13501), true, "-X:U1<R");
      Client client1 = new Client(client0);
      assertTrue(client1.isPremium());
      assertEquals(4, client0.getPoints());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Period period0 = Period.of((-2643), (-1223), 4114);
      IsoChronology isoChronology0 = period0.getChronology();
      LocalDate localDate0 = MockIsoChronology.dateNow(isoChronology0);
      Client client0 = new Client((String) null, (String) null, (String) null, (String) null, localDate0);
      int int0 = client0.getPoints();
      assertEquals(0, int0);
      assertFalse(client0.isPremium());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.now();
      Client client0 = new Client("\nPosi\u00E7\u00E3o : (", "\nPosi\u00E7\u00E3o : (", "<V/L~ odFNQejUuy0", "", localDate0);
      // Undeclared exception!
      try { 
        client0.setPosition((Point2D.Double) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
//         verifyException("Client", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.now();
      Client client0 = new Client("V0l]gtFZ/P", "V0l]gtFZ/P", "V0l]gtFZ/P", "V0l]gtFZ/P", localDate0);
      client0.setPremium(false);
      assertFalse(client0.isPremium());
      assertEquals(0, client0.getPoints());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.now();
      Client client0 = new Client("V0l]gtFZ/P", "V0l]gtFZ/P", "V0l]gtFZ/P", "V0l]gtFZ/P", localDate0);
      String string0 = client0.toString();
      assertEquals("Utilizador - V0l]gtFZ/P\neMail : V0l]gtFZ/P\nPassword : V0l]gtFZ/P\nMorada : V0l]gtFZ/P\nData de nascimento : 2014-02-14\nDist\u00E2ncia Total : 0.0\nDinheiro gasto/ganho : 0.0\nN\u00FAmero de viagens :0\nPosi\u00E7\u00E3o : (0.0,0.0)\nPontos : 0\nPremium : false\nFila de espera : null", string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.now();
      Client client0 = new Client("m:", "m:", "m:", "m:", localDate0);
      client0.setPoints(2);
      assertEquals(2, client0.getPoints());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Client client0 = null;
      try {
        client0 = new Client();
      //  fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Invalid value for MonthOfYear (valid values 1 - 12): 0
         //
         verifyException("java.time.temporal.ValueRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.now();
      Client client0 = new Client("\nPosi\u00E7\u00E3o : (", "\nPosi\u00E7\u00E3o : (", "<V/L~ odFNQejUuy0", "", localDate0);
      client0.setQueue(") ---> (");
      client0.getQueue();
      assertEquals(0, client0.getPoints());
      assertFalse(client0.isPremium());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.now();
      Client client0 = new Client("\nPosi\u00E7\u00E3o : (", "\nPosi\u00E7\u00E3o : (", "<V/L~ odFNQejUuy0", "", localDate0);
      client0.getQueue();
      assertFalse(client0.isPremium());
      assertEquals(0, client0.getPoints());
  }
}
