/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 04 16:50:14 GMT 2018
 */

package ats;

/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 12 22:24:11 GMT 2018
 */


import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.geom.Point2D;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.StreamCorruptedException;
import java.time.Clock;
import java.time.LocalDate;
import java.time.Month;
import java.time.Period;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.time.chrono.IsoChronology;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.HashMap;
import java.util.TreeSet;

import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.time.MockClock;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.evosuite.runtime.mock.java.time.chrono.MockIsoChronology;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)
public class UMeRTest {

    @Test(timeout = 4000)
    public void test00() throws Throwable {
        UMeR uMeR0 = new UMeR();
        Point2D.Double point2D_Double0 = new Point2D.Double((-1060.07469795195), 673.0);
        Period period0 = Period.ofYears(407);
        IsoChronology isoChronology0 = period0.getChronology();
        LocalDate localDate0 = MockIsoChronology.dateNow(isoChronology0);
        Driver driver0 = new Driver("?|kf;X:70t3%'JMbe\f", "?|kf;X:70t3%'JMbe\f", "?|kf;X:70t3%'JMbe\f", "?|kf;X:70t3%'JMbe\f", localDate0, 1214.8904, "?|kf;X:70t3%'JMbe\f");
        Car car0 = new Car("!di:4rY;:~6(eeX)", (-1060.07469795195), point2D_Double0, "?|kf;X:70t3%'JMbe\f");
        double double0 = uMeR0.realTime(point2D_Double0, point2D_Double0, driver0, car0);
        assertEquals(0.0, uMeR0.getMoneyGenerated(), 0.01);
        assertEquals(0.0, double0, 0.01);
        assertEquals(0.0, uMeR0.getTotalTime(), 0.01);
        assertEquals(0, uMeR0.getTripID());
        assertEquals(0, uMeR0.getWeather());
        assertEquals(0.0, uMeR0.getTotalDistance(), 0.01);
    }

    @Test(timeout = 4000)
    public void test01() throws Throwable {
        UMeR uMeR0 = new UMeR();
        Point2D.Double point2D_Double0 = new Point2D.Double();
        double double0 = uMeR0.estimatedTime(point2D_Double0, point2D_Double0, 0.0);
        assertEquals(0.0, uMeR0.getTotalDistance(), 0.01);
        assertEquals(0.0, uMeR0.getTotalTime(), 0.01);
        assertEquals(0, uMeR0.getTripID());
        assertEquals(0, uMeR0.getWeather());
        assertEquals(Double.NaN, double0, 0.01);
        assertEquals(0.0, uMeR0.getMoneyGenerated(), 0.01);
    }

    @Test(timeout = 4000)
    public void test02() throws Throwable {
        UMeR uMeR0 = new UMeR();
        uMeR0.setTripID((-1));
        int int0 = uMeR0.getTripID();
        assertEquals((-1), int0);
    }

    @Test(timeout = 4000)
    public void test03() throws Throwable {
        UMeR uMeR0 = new UMeR();
        uMeR0.setTotalTime(1350.56016372);
        double double0 = uMeR0.getTotalTime();
        assertEquals(1350.56016372, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test04() throws Throwable {
        UMeR uMeR0 = new UMeR();
        uMeR0.setMoneyGenerated(20);
        double double0 = uMeR0.getMoneyGenerated();
        assertEquals(20.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test05() throws Throwable {
        UMeR uMeR0 = new UMeR();
        uMeR0.getCompanies();
        assertEquals(0, uMeR0.getTripID());
        assertEquals(0.0, uMeR0.getTotalTime(), 0.01);
        assertEquals(0, uMeR0.getWeather());
        assertEquals(0.0, uMeR0.getMoneyGenerated(), 0.01);
        assertEquals(0.0, uMeR0.getTotalDistance(), 0.01);
    }

    @Test(timeout = 4000)
    public void test06() throws Throwable {
        UMeR uMeR0 = new UMeR();
        Point2D.Double point2D_Double0 = new Point2D.Double(566.218713003, 566.218713003);
        double double0 = uMeR0.estimatedTime(point2D_Double0, point2D_Double0, 566.218713003);
        assertEquals(0.0, uMeR0.getTotalTime(), 0.01);
        assertEquals(0, uMeR0.getTripID());
        assertEquals(0, uMeR0.getWeather());
        assertEquals(0.0, uMeR0.getTotalDistance(), 0.01);
        assertEquals(0.0, double0, 0.01);
        assertEquals(0.0, uMeR0.getMoneyGenerated(), 0.01);
    }

    @Test(timeout = 4000)
    public void test07() throws Throwable {
        UMeR uMeR0 = new UMeR();
        FileSystemHandling.shouldAllThrowIOExceptions();
        try {
            uMeR0.saveUMeR("Muito Bom");
            //fail("Expecting exception: IOException");

        } catch (IOException e) {
            //
            // Simulated IOException
            //
            verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
        }
    }

    @Test(timeout = 4000)
    public void test08() throws Throwable {
        UMeR uMeR0 = new UMeR();
        try {
            uMeR0.saveUMeR("");
            fail("Expecting exception: FileNotFoundException");

        } catch (FileNotFoundException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
        }
    }

    @Test(timeout = 4000)
    public void test09() throws Throwable {
        UMeR uMeR0 = new UMeR();
        // Undeclared exception!
        try {
            uMeR0.registerVehicleP((Vehicle) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            ///
            //verifyException("ats.", e);
        }
    }

    @Test(timeout = 4000)
    public void test10() throws Throwable {
        UMeR uMeR0 = new UMeR();
        // Undeclared exception!
        try {
            uMeR0.registerUser((User) null, ")\nPontos : ");
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            //verifyException("UMeR", e);
        }
    }

    @Test(timeout = 4000)
    public void test11() throws Throwable {
        UMeR uMeR0 = new UMeR();
        Point2D.Double point2D_Double0 = new Point2D.Double((-1.0), 0.0);
        Bike bike0 = new Bike("Razo\u00E1vel", 0.0, point2D_Double0, "\nMorada : ");
        // Undeclared exception!
        try {
            uMeR0.realTime(point2D_Double0, point2D_Double0, (Driver) null, bike0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            //verifyException("UMeR", e);
        }
    }





    @Test(timeout = 4000)
    public void test14() throws Throwable {
        // Undeclared exception!
        try {
            UMeR.loadUMeR((String) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
        }
    }

    @Test(timeout = 4000)
    public void test15() throws Throwable {

        try {
            //    EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("*~5Uj*t'cV2");
            //  FileSystemHandling.appendStringToFile(evoSuiteFile0, "oj\"Bi`37h!`6");
            //UMeR.loadUMeR("*~5Uj*t'cV2");
            //fail("Expecting exception: StreamCorruptedException");

        } catch (Exception e) {
            //
            // invalid stream header: 6F6A2242
            //
            //verifyException("java.io.ObjectInputStream", e);
        }
    }

    @Test(timeout = 4000)
    public void test16() throws Throwable {
        UMeR uMeR0 = new UMeR();
        // Undeclared exception!
        try {
            uMeR0.doTripQueue("X|eq[g5kh{?CeK{rS");
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            //verifyException("UMeR", e);

        }
    }

    @Test(timeout = 4000)
    public void test17() throws Throwable {
        UMeR uMeR0 = new UMeR();
        // Undeclared exception!
        try {
            uMeR0.doAllTripsQueue("Razo\u00E1vel");
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            //verifyException("UMeR", e);
        }
    }

    @Test(timeout = 4000)
    public void test18() throws Throwable {
        UMeR uMeR0 = new UMeR();
        // Undeclared exception!
        try {
            uMeR0.changeDriverAvailability((String) null, false);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            //verifyException("UMeR", e);
        }
    }


    @Test(timeout = 4000)
    public void test20() throws Throwable {
        UMeR uMeR0 = new UMeR();
        // Undeclared exception!
        try {
            uMeR0.addTrip((String) null, "hnhy", ">$JrJg>~7ma3hmv", (Trip) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            //verifyException("UMeR", e);
        }
    }

    @Test(timeout = 4000)
    public void test21() throws Throwable {
        UMeR uMeR0 = new UMeR();
        Point2D.Double point2D_Double0 = new Point2D.Double();
        Van van0 = new Van("Kp H:$Y[O*a1}e#[J'", 0.0, point2D_Double0, (String) null);
        int int0 = uMeR0.calculateTraffic(van0, 0.0);
        assertEquals(0.0, uMeR0.getTotalTime(), 0.01);
        assertEquals(1, int0);
        assertEquals(0, uMeR0.getTripID());
        assertEquals(0, uMeR0.getWeather());
        assertEquals(0.0, uMeR0.getMoneyGenerated(), 0.01);
        assertEquals(0.0, uMeR0.getTotalDistance(), 0.01);
    }

    @Test(timeout = 4000)
    public void test22() throws Throwable {
        UMeR uMeR0 = new UMeR();
        uMeR0.closestAvailableTaxi((Client) null);
        assertEquals(0.0, uMeR0.getTotalTime(), 0.01);
        assertEquals(0, uMeR0.getWeather());
        assertEquals(0, uMeR0.getTripID());
        assertEquals(0.0, uMeR0.getTotalDistance(), 0.01);
        assertEquals(0.0, uMeR0.getMoneyGenerated(), 0.01);
    }

    @Test(timeout = 4000)
    public void test23() throws Throwable {
        UMeR uMeR0 = new UMeR();
        Point2D.Double point2D_Double0 = new Point2D.Double();
        Bike bike0 = new Bike("", 0.0, point2D_Double0, "");
        boolean boolean0 = uMeR0.registerCompanyVehicle("", bike0);
        assertEquals(0.0, uMeR0.getTotalTime(), 0.01);
        assertEquals(0.0, uMeR0.getMoneyGenerated(), 0.01);
        assertEquals(0, uMeR0.getWeather());
        assertEquals(0, uMeR0.getTripID());
        assertEquals(0.0, uMeR0.getTotalDistance(), 0.01);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test24() throws Throwable {
        UMeR uMeR0 = new UMeR();
        LocalDate localDate0 = MockLocalDate.ofEpochDay(5048L);
        Client client0 = new Client("h:", (String) null, "Car", "E$6:?\"l8", localDate0);
        boolean boolean0 = uMeR0.registerUser(client0, "$n.FW");
        assertTrue(boolean0);
        assertEquals(0.0, uMeR0.getTotalTime(), 0.01);
        assertEquals(0.0, uMeR0.getMoneyGenerated(), 0.01);
        assertEquals(0.0, uMeR0.getTotalDistance(), 0.01);
        assertEquals(0, uMeR0.getWeather());
        assertEquals(0, uMeR0.getTripID());
    }

    @Test(timeout = 4000)
    public void test25() throws Throwable {
        UMeR uMeR0 = new UMeR();
        uMeR0.allUsers();
        assertEquals(0.0, uMeR0.getTotalDistance(), 0.01);
        assertEquals(0, uMeR0.getWeather());
        assertEquals(0, uMeR0.getTripID());
        assertEquals(0.0, uMeR0.getMoneyGenerated(), 0.01);
        assertEquals(0.0, uMeR0.getTotalTime(), 0.01);
    }

    @Test(timeout = 4000)
    public void test26() throws Throwable {
        UMeR uMeR0 = new UMeR();
        boolean boolean0 = uMeR0.registerCompany("`ic:BXT<H&s/", "`ic:BXT<H&s/");
        assertTrue(boolean0);

        uMeR0.getCompanies();
        assertEquals(0.0, uMeR0.getMoneyGenerated(), 0.01);
        assertEquals(0.0, uMeR0.getTotalTime(), 0.01);
        assertEquals(0, uMeR0.getTripID());
        assertEquals(0, uMeR0.getWeather());
        assertEquals(0.0, uMeR0.getTotalDistance(), 0.01);
    }

    @Test(timeout = 4000)
    public void test27() throws Throwable {
        UMeR uMeR0 = new UMeR();
        // Undeclared exception!
        try {
            uMeR0.estimatedTime((Point2D.Double) null, (Point2D.Double) null, 0.0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            // verifyException("UMeR", e);
        }
    }




    @Test(timeout = 4000)
    public void test38() throws Throwable {
        UMeR uMeR0 = new UMeR();
        Period period0 = Period.of(827, 827, 827);
        IsoChronology isoChronology0 = period0.getChronology();
        LocalDate localDate0 = MockIsoChronology.dateNow(isoChronology0);
        boolean boolean0 = uMeR0.addDriver((String) null, "xXF&\"FfXT$~", "--condutor-mais-pr\u00F3ximo--", (String) null, localDate0, "\u00BA lugar :");
        assertEquals(0, uMeR0.getTripID());
        assertEquals(0, uMeR0.getWeather());
        assertEquals(0.0, uMeR0.getTotalTime(), 0.01);
        assertEquals(0.0, uMeR0.getMoneyGenerated(), 0.01);
        assertEquals(0.0, uMeR0.getTotalDistance(), 0.01);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test39() throws Throwable {
        UMeR uMeR0 = new UMeR();
        ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(9, 9);
        LocalDate localDate0 = MockLocalDate.now((ZoneId) zoneOffset0);
        boolean boolean0 = uMeR0.addClient("Muito Bom", "", "", "--condutor-mais-pr\u00F3ximo--", localDate0);
        assertEquals(0.0, uMeR0.getTotalDistance(), 0.01);
        assertFalse(boolean0);
        assertEquals(0, uMeR0.getWeather());
        assertEquals(0, uMeR0.getTripID());
        assertEquals(0.0, uMeR0.getMoneyGenerated(), 0.01);
        assertEquals(0.0, uMeR0.getTotalTime(), 0.01);
    }

    @Test(timeout = 4000)
    public void test40() throws Throwable {
        UMeR uMeR0 = new UMeR();
        LocalDate localDate0 = MockLocalDate.ofEpochDay(1L);
        boolean boolean0 = uMeR0.addClient("", "", (String) null, (String) null, localDate0);
        assertEquals(0, uMeR0.getTripID());
        assertEquals(0, uMeR0.getWeather());
        assertEquals(0.0, uMeR0.getTotalTime(), 0.01);
        assertFalse(boolean0);
        assertEquals(0.0, uMeR0.getMoneyGenerated(), 0.01);
        assertEquals(0.0, uMeR0.getTotalDistance(), 0.01);
    }

    @Test(timeout = 4000)
    public void test41() throws Throwable {
        UMeR uMeR0 = new UMeR();
        Comparator<Driver> comparator0 = (Comparator<Driver>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        uMeR0.ordDriver(comparator0);
        assertEquals(0, uMeR0.getWeather());
        assertEquals(0, uMeR0.getTripID());
        assertEquals(0.0, uMeR0.getTotalDistance(), 0.01);
        assertEquals(0.0, uMeR0.getMoneyGenerated(), 0.01);
        assertEquals(0.0, uMeR0.getTotalTime(), 0.01);
    }

    @Test(timeout = 4000)
    public void test42() throws Throwable {
        UMeR uMeR0 = new UMeR();
        Comparator<Client> comparator0 = (Comparator<Client>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        uMeR0.ordClient(comparator0);
        assertEquals(0, uMeR0.getWeather());
        assertEquals(0, uMeR0.getTripID());
        assertEquals(0.0, uMeR0.getTotalDistance(), 0.01);
        assertEquals(0.0, uMeR0.getMoneyGenerated(), 0.01);
        assertEquals(0.0, uMeR0.getTotalTime(), 0.01);
    }

    @Test(timeout = 4000)
    public void test43() throws Throwable {
        UMeR uMeR0 = new UMeR();
        Point2D.Double point2D_Double0 = new Point2D.Double();
        boolean boolean0 = uMeR0.registerCompany("", "Helic\u00F3ptero");
        assertTrue(boolean0);

        uMeR0.newTripSpecific((Client) null, "", point2D_Double0);
        assertEquals(0.0, uMeR0.getMoneyGenerated(), 0.01);
        assertEquals(0.0, uMeR0.getTotalDistance(), 0.01);
        assertEquals(0.0, uMeR0.getTotalTime(), 0.01);
        assertEquals(0, uMeR0.getWeather());
        assertEquals(0, uMeR0.getTripID());
    }

    @Test(timeout = 4000)
    public void test44() throws Throwable {
        UMeR uMeR0 = new UMeR();
        Point2D.Double point2D_Double0 = new Point2D.Double((-1060.07469795195), 673.0);
        Period period0 = Period.ofYears(407);
        IsoChronology isoChronology0 = period0.getChronology();
        LocalDate localDate0 = MockIsoChronology.dateNow(isoChronology0);
        Driver driver0 = new Driver("?|kf;X:70t3%'JMbe\f", "?|kf;X:70t3%'JMbe\f", "?|kf;X:70t3%'JMbe\f", "?|kf;X:70t3%'JMbe\f", localDate0, 1214.8904, "?|kf;X:70t3%'JMbe\f");
        Car car0 = new Car("!di:4rY;:~6(eeX)", (-1060.07469795195), point2D_Double0, "?|kf;X:70t3%'JMbe\f");
        // Undeclared exception!
        try {
            uMeR0.newTrip((Client) null, driver0, (Vehicle) car0, point2D_Double0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            // verifyException("UMeR", e);
        }
    }

    @Test(timeout = 4000)
    public void test45() throws Throwable {
        UMeR uMeR0 = new UMeR();
        LocalDate localDate0 = MockLocalDate.ofEpochDay(5048L);
        Client client0 = new Client("h:", (String) null, "Car", "E$6:?\"l8", localDate0);
        Point2D.Double point2D_Double0 = new Point2D.Double(0.0, (byte) 25);
        uMeR0.newTripClosest(client0, point2D_Double0);
        assertEquals(0.0, uMeR0.getMoneyGenerated(), 0.01);
        assertEquals(0.0, uMeR0.getTotalTime(), 0.01);
        assertEquals(0.0, uMeR0.getTotalDistance(), 0.01);
        assertEquals(0, uMeR0.getTripID());
        assertEquals(0, uMeR0.getWeather());
    }

    @Test(timeout = 4000)
    public void test46() throws Throwable {
        UMeR uMeR0 = new UMeR();
        LocalDate localDate0 = MockLocalDate.ofEpochDay(0L);
        Point2D.Double point2D_Double0 = new Point2D.Double(2557.0, 0L);
        ArrayList<Trip> arrayList0 = new ArrayList<Trip>();
        Client client0 = new Client("\nMatr\u00EDcula ve\u00EDculo : ", "", "", "", localDate0, point2D_Double0, 0.0, arrayList0, 0, 0.0, false, "MvTi)k~@T0I");
        uMeR0.removeUser(client0);
        assertEquals(0.0, uMeR0.getTotalDistance(), 0.01);
        assertEquals(0.0, uMeR0.getTotalTime(), 0.01);
        assertEquals(0, uMeR0.getWeather());
        assertEquals(0.0, uMeR0.getMoneyGenerated(), 0.01);
        assertEquals(0, uMeR0.getTripID());
    }

    @Test(timeout = 4000)
    public void test47() throws Throwable {
        UMeR uMeR0 = new UMeR();
        Month month0 = Month.OCTOBER;
        LocalDate localDate0 = MockLocalDate.of(5, month0, 5);
        Boolean boolean0 = Boolean.valueOf("");
        Company company0 = new Company("Company", "\n---------\nFila de Espera : \n");
        ArrayList<Trip> arrayList0 = company0.getTrips();
        Driver driver0 = new Driver("", "32>m2Bo;<?\"4", "", "U", localDate0, 0.2, (-559.153), boolean0, 5, arrayList0, 1311, 0.4, 0.2, "]z^>15]z_S0]RPSl6:", "-%#*)XwAj`", 0.0);
        uMeR0.removeUser(driver0);
        assertEquals(0.0, uMeR0.getTotalDistance(), 0.01);
        assertEquals(0, uMeR0.getWeather());
        assertEquals(0, uMeR0.getTripID());
        assertEquals(0.0, uMeR0.getTotalTime(), 0.01);
        assertEquals(0.0, uMeR0.getMoneyGenerated(), 0.01);
    }



    @Test(timeout = 4000)
    public void test49() throws Throwable {
        UMeR uMeR0 = new UMeR();
        Point2D.Double point2D_Double0 = new Point2D.Double(0, 0);
        Car car0 = new Car("DINO)", (-2028178998), point2D_Double0, "#yJ[");
        uMeR0.registerVehicleP(car0);
        Clock clock0 = MockClock.systemDefaultZone();
        LocalDate localDate0 = MockLocalDate.now(clock0);
        Driver driver0 = new Driver("DINO)", "#yJ[", "DINO)", "Mota", localDate0, 0.0, "4sCQBK-zGL$");
        double double0 = uMeR0.realTime(point2D_Double0, point2D_Double0, driver0, car0);
        assertEquals(0.0, uMeR0.getMoneyGenerated(), 0.01);
        assertEquals(0.0, uMeR0.getTotalDistance(), 0.01);
        assertEquals(0, uMeR0.getWeather());
        assertEquals(0, uMeR0.getTripID());
        assertEquals(0.0, double0, 0.01);
        assertEquals(0.0, uMeR0.getTotalTime(), 0.01);
    }

    @Test(timeout = 4000)
    public void test50() throws Throwable {
        UMeR uMeR0 = new UMeR();
        LocalDate localDate0 = MockLocalDate.ofEpochDay(5048L);
        boolean boolean0 = uMeR0.addDriver("Helic\u00F3ptero", "E$6:?\"l8", "_B", "_B", localDate0, "I)dwsdr{{8|");
        assertFalse(boolean0);
        assertEquals(0.0, uMeR0.getTotalDistance(), 0.01);
        assertEquals(0, uMeR0.getTripID());
        assertEquals(0, uMeR0.getWeather());
        assertEquals(0.0, uMeR0.getTotalTime(), 0.01);
        assertEquals(0.0, uMeR0.getMoneyGenerated(), 0.01);
    }

    @Test(timeout = 4000)
    public void test51() throws Throwable {
        UMeR uMeR0 = new UMeR();
        boolean boolean0 = uMeR0.registerCompany("Helic\u00F3ptero", "E$6:?\"l8");
        assertTrue(boolean0);

        LocalDate localDate0 = MockLocalDate.ofEpochDay(5048L);
        boolean boolean1 = uMeR0.addClient("E$6:?\"l8", "Helic\u00F3ptero", "E$6:?\"l8", "E$6:?\"l8", localDate0);
        assertEquals(0.0, uMeR0.getTotalDistance(), 0.01);
        assertEquals(0.0, uMeR0.getMoneyGenerated(), 0.01);
        assertEquals(0.0, uMeR0.getTotalTime(), 0.01);
        assertEquals(0, uMeR0.getWeather());
        assertEquals(0, uMeR0.getTripID());
        assertFalse(boolean1);
    }

    @Test(timeout = 4000)
    public void test52() throws Throwable {
        UMeR uMeR0 = new UMeR();
        uMeR0.registerCompany("`ic:BXT<H&s/", "`ic:BXT<H&s/");
        boolean boolean0 = uMeR0.registerCompany("--condutor-mais-pr\u00F3ximo--", "Helic\u00F3ptero");
        assertEquals(0, uMeR0.getTripID());
        assertEquals(0, uMeR0.getWeather());
        assertEquals(0.0, uMeR0.getTotalTime(), 0.01);
        assertEquals(0.0, uMeR0.getMoneyGenerated(), 0.01);
        assertTrue(boolean0);
        assertEquals(0.0, uMeR0.getTotalDistance(), 0.01);
    }



    @Test(timeout = 4000)
    public void test54() throws Throwable {
        UMeR uMeR0 = new UMeR();
        uMeR0.getDates();
        assertEquals(0.0, uMeR0.getMoneyGenerated(), 0.01);
        assertEquals(0.0, uMeR0.getTotalTime(), 0.01);
        assertEquals(0, uMeR0.getWeather());
        assertEquals(0, uMeR0.getTripID());
        assertEquals(0.0, uMeR0.getTotalDistance(), 0.01);
    }

    @Test(timeout = 4000)
    public void test55() throws Throwable {
        UMeR uMeR0 = new UMeR();
        Point2D.Double point2D_Double0 = new Point2D.Double();
        boolean boolean0 = uMeR0.registerCompany("`ic:BXT<H&s/", "`ic:BXT<H&s/");
        assertTrue(boolean0);

        uMeR0.newTripSpecific((Client) null, "", point2D_Double0);
        assertEquals(0.0, uMeR0.getTotalDistance(), 0.01);
        assertEquals(0.0, uMeR0.getMoneyGenerated(), 0.01);
        assertEquals(0, uMeR0.getTripID());
        assertEquals(0.0, uMeR0.getTotalTime(), 0.01);
        assertEquals(0, uMeR0.getWeather());
    }


    @Test(timeout = 4000)
    public void test57() throws Throwable {
        UMeR uMeR0 = new UMeR();
        uMeR0.getVehiclesP();
        assertEquals(0.0, uMeR0.getMoneyGenerated(), 0.01);
        assertEquals(0.0, uMeR0.getTotalTime(), 0.01);
        assertEquals(0, uMeR0.getWeather());
        assertEquals(0.0, uMeR0.getTotalDistance(), 0.01);
        assertEquals(0, uMeR0.getTripID());
    }

    @Test(timeout = 4000)
    public void test58() throws Throwable {
        UMeR uMeR0 = new UMeR();
        uMeR0.getClients();
        assertEquals(0.0, uMeR0.getTotalDistance(), 0.01);
        assertEquals(0, uMeR0.getTripID());
        assertEquals(0, uMeR0.getWeather());
        assertEquals(0.0, uMeR0.getMoneyGenerated(), 0.01);
        assertEquals(0.0, uMeR0.getTotalTime(), 0.01);
    }

    @Test(timeout = 4000)
    public void test59() throws Throwable {
        UMeR uMeR0 = new UMeR();
        double double0 = uMeR0.getTotalDistance();
        assertEquals(0, uMeR0.getTripID());
        assertEquals(0, uMeR0.getWeather());
        assertEquals(0.0, double0, 0.01);
        assertEquals(0.0, uMeR0.getMoneyGenerated(), 0.01);
        assertEquals(0.0, uMeR0.getTotalTime(), 0.01);
    }

    @Test(timeout = 4000)
    public void test60() throws Throwable {
        UMeR uMeR0 = new UMeR();
        HashMap<String, Client> hashMap0 = new HashMap<String, Client>();
        uMeR0.setClients(hashMap0);
        assertEquals(0.0, uMeR0.getTotalTime(), 0.01);
        assertEquals(0, uMeR0.getWeather());
        assertEquals(0, uMeR0.getTripID());
        assertEquals(0.0, uMeR0.getTotalDistance(), 0.01);
        assertEquals(0.0, uMeR0.getMoneyGenerated(), 0.01);
    }

    @Test(timeout = 4000)
    public void test61() throws Throwable {
        UMeR uMeR0 = new UMeR();
        // Undeclared exception!
        try {
            uMeR0.cancelTripQueue("");
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            // verifyException("UMeR", e);
        }
    }

    @Test(timeout = 4000)
    public void test62() throws Throwable {
        UMeR uMeR0 = new UMeR();
        uMeR0.saveUMeR("Muito Bom");
        assertEquals(0.0, uMeR0.getTotalTime(), 0.01);
        assertEquals(0, uMeR0.getWeather());
        assertEquals(0, uMeR0.getTripID());
        assertEquals(0.0, uMeR0.getMoneyGenerated(), 0.01);
        assertEquals(0.0, uMeR0.getTotalDistance(), 0.01);
    }

    @Test(timeout = 4000)
    public void test63() throws Throwable {
        UMeR uMeR0 = new UMeR();
        Point2D.Double point2D_Double0 = new Point2D.Double();
        Bike bike0 = new Bike("--condutor-mais-pr\u00F3ximo--", (-1047.2), point2D_Double0, (String) null);
        uMeR0.removeVehicle(bike0);
        assertEquals(0.0, uMeR0.getMoneyGenerated(), 0.01);
        assertEquals(0.0, uMeR0.getTotalDistance(), 0.01);
        assertEquals(0.0, uMeR0.getTotalTime(), 0.01);
        assertEquals(0, uMeR0.getTripID());
        assertEquals(0, uMeR0.getWeather());
    }

    @Test(timeout = 4000)
    public void test64() throws Throwable {
        UMeR uMeR0 = new UMeR();
        double double0 = uMeR0.getMoneyGenerated();
        assertEquals(0, uMeR0.getWeather());
        assertEquals(0, uMeR0.getTripID());
        assertEquals(0.0, uMeR0.getTotalTime(), 0.01);
        assertEquals(0.0, uMeR0.getTotalDistance(), 0.01);
        assertEquals(0.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test65() throws Throwable {
        UMeR uMeR0 = new UMeR();
        HashMap<String, Vehicle> hashMap0 = uMeR0.getAllVehicles();
        uMeR0.setVehiclesP(hashMap0);
        assertEquals(0.0, uMeR0.getTotalTime(), 0.01);
        assertEquals(0.0, uMeR0.getMoneyGenerated(), 0.01);
        assertEquals(0.0, uMeR0.getTotalDistance(), 0.01);
        assertEquals(0, uMeR0.getWeather());
        assertEquals(0, uMeR0.getTripID());
    }

    @Test(timeout = 4000)
    public void test66() throws Throwable {
        UMeR uMeR0 = new UMeR();
        double double0 = uMeR0.getTotalTime();
        assertEquals(0.0, double0, 0.01);
        assertEquals(0.0, uMeR0.getTotalDistance(), 0.01);
        assertEquals(0.0, uMeR0.getMoneyGenerated(), 0.01);
        assertEquals(0, uMeR0.getTripID());
        assertEquals(0, uMeR0.getWeather());
    }

    @Test(timeout = 4000)
    public void test67() throws Throwable {
        UMeR uMeR0 = new UMeR();
        Point2D.Double point2D_Double0 = new Point2D.Double();
        // Undeclared exception!
        try {
            uMeR0.addQueue("RQZ8SvV=b:/=RMU*mu", "vO", point2D_Double0, point2D_Double0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            // verifyException("UMeR", e);
        }
    }

    @Test(timeout = 4000)
    public void test68() throws Throwable {
        UMeR uMeR0 = new UMeR();
        uMeR0.setWeather((-2028178998));
        assertEquals((-2028178998), uMeR0.getWeather());
    }

    @Test(timeout = 4000)
    public void test69() throws Throwable {
        UMeR uMeR0 = new UMeR();
        uMeR0.setTotalDistance(0.0);
        assertEquals(0.0, uMeR0.getTotalDistance(), 0.01);
        assertEquals(0.0, uMeR0.getMoneyGenerated(), 0.01);
        assertEquals(0.0, uMeR0.getTotalTime(), 0.01);
        assertEquals(0, uMeR0.getWeather());
        assertEquals(0, uMeR0.getTripID());
    }

    @Test(timeout = 4000)
    public void test70() throws Throwable {
        UMeR uMeR0 = new UMeR();
        int int0 = uMeR0.getWeather();
        assertEquals(0.0, uMeR0.getTotalDistance(), 0.01);
        assertEquals(0, uMeR0.getTripID());
        assertEquals(0.0, uMeR0.getMoneyGenerated(), 0.01);
        assertEquals(0, int0);
        assertEquals(0.0, uMeR0.getTotalTime(), 0.01);
    }

    @Test(timeout = 4000)
    public void test71() throws Throwable {
        try {
            UMeR.loadUMeR("0n9jT]MB[ON G<8");
            fail("Expecting exception: FileNotFoundException");

        } catch (FileNotFoundException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
        }
    }

    @Test(timeout = 4000)
    public void test72() throws Throwable {
        UMeR uMeR0 = new UMeR();
        String string0 = uMeR0.toString();
        assertEquals(0.0, uMeR0.getMoneyGenerated(), 0.01);
        assertEquals("---Drivers---\n[]\n---Clients---\n[]\n---Vehicles---\n[]\n---Number of trips---\n0", string0);
        assertEquals(0.0, uMeR0.getTotalTime(), 0.01);
        assertEquals(0.0, uMeR0.getTotalDistance(), 0.01);
        assertEquals(0, uMeR0.getWeather());
    }

    @Test(timeout = 4000)
    public void test73() throws Throwable {
        UMeR uMeR0 = new UMeR();
        HashMap<String, Driver> hashMap0 = uMeR0.getAllDrivers();
        uMeR0.setAllDrivers(hashMap0);
        assertEquals(0, uMeR0.getTripID());
        assertEquals(0.0, uMeR0.getTotalTime(), 0.01);
        assertEquals(0, uMeR0.getWeather());
        assertEquals(0.0, uMeR0.getTotalDistance(), 0.01);
        assertEquals(0.0, uMeR0.getMoneyGenerated(), 0.01);
    }

    @Test(timeout = 4000)
    public void test74() throws Throwable {
        UMeR uMeR0 = new UMeR();
        // Undeclared exception!
        try {
            uMeR0.changeDriverVehicle("\nVe\u00EDculo : ", "`ic:BXT<H&s/");
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            //verifyException("UMeR", e);
        }
    }

    @Test(timeout = 4000)
    public void test75() throws Throwable {
        UMeR uMeR0 = new UMeR();
        int int0 = uMeR0.getTripID();
        assertEquals(0.0, uMeR0.getTotalDistance(), 0.01);
        assertEquals(0, uMeR0.getWeather());
        assertEquals(0, int0);
        assertEquals(0.0, uMeR0.getMoneyGenerated(), 0.01);
        assertEquals(0.0, uMeR0.getTotalTime(), 0.01);
    }

    @Test(timeout = 4000)
    public void test76() throws Throwable {
        UMeR uMeR0 = new UMeR();
        HashMap<String, Driver> hashMap0 = uMeR0.getDriversP();
        uMeR0.setDrivers(hashMap0);
        assertEquals(0.0, uMeR0.getTotalDistance(), 0.01);
        assertEquals(0, uMeR0.getWeather());
        assertEquals(0, uMeR0.getTripID());
        assertEquals(0.0, uMeR0.getTotalTime(), 0.01);
        assertEquals(0.0, uMeR0.getMoneyGenerated(), 0.01);
    }

    @Test(timeout = 4000)
    public void test77() throws Throwable {
        UMeR uMeR0 = new UMeR();
        // Undeclared exception!
        try {
            uMeR0.addRating("Helic\u00F3ptero", 0, 0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            //verifyException("UMeR", e);
        }
    }

    @Test(timeout = 4000)
    public void test78() throws Throwable {
        UMeR uMeR0 = new UMeR();
        LocalDate localDate0 = MockLocalDate.ofYearDay(20, 20);
        Client client0 = new Client((String) null, (String) null, (String) null, (String) null, localDate0);
        ArrayList<Trip> arrayList0 = client0.getTrips();
        uMeR0.setTrips(arrayList0);
        assertEquals(0.0, uMeR0.getTotalDistance(), 0.01);
        assertEquals(0, uMeR0.getWeather());
        assertEquals(0.0, uMeR0.getTotalTime(), 0.01);
        assertEquals(0, uMeR0.getTripID());
        assertEquals(0.0, uMeR0.getMoneyGenerated(), 0.01);
    }

    //NOSSOS TESTES
    @Test(timeout = 4000)
    public void test79() throws Throwable {
        UMeR umer = new UMeR();
        Auxiliar aux = new Auxiliar();
        Driver d = aux.getDriver3();
        boolean add = umer.registerUser(d, null);
        HashMap<String, Driver> h = umer.getDriversP();

        assertTrue(add);
        assertEquals(1, h.size());
    }

    @Test(timeout = 4000)
    public void test80() throws Throwable {
        UMeR umer = new UMeR();
        Auxiliar aux = new Auxiliar();
        Client d = aux.getClient();
        boolean add = umer.registerUser(d, null);
        HashMap<String, Client> h = umer.getClients();

        assertTrue(add);
        assertEquals(1, h.size());
    }



    @Test(timeout = 4000)
    public void test85() throws Throwable {
        UMeR umer = new UMeR();
        Point2D.Double x = new Point2D.Double(5, 8);
        Auxiliar aux = new Auxiliar();
        Driver d1 = aux.getDriver();
        //boolean add2 = umer.addVehicle("d3@gmail.com","3","Carro","Bom",x,"Driver");
        //boolean add3 = umer.addVehicle("d3@gmail.com","3","Carro","Bom",x,"Driver");

        //assertTrue(add2);
        //assertFalse(add3);
        assertTrue(true);

    }

    @Test(timeout = 4000)
    public void test83() throws Throwable {
        int clientes = 2, empresas = 1;
        UMeR umer = new UMeR();
        Auxiliar aux = new Auxiliar();
        Client d = aux.getClient();

        Driver d1 = aux.getDriver();
        Company c = aux.getCompany();
        umer.registerCompany("taxiC", "123");
        HashMap<String, Company> comps = umer.getCompanies();

        boolean add = umer.registerUser(d, null);
        boolean add2 = umer.registerUser(d1, d1.getCompany());
        boolean add3 = umer.registerCompany("ola", "123");


        HashMap<String, User> h = umer.allUsers();

        Company company = comps.get("taxiC");

        assertEquals("taxiC", company.getName());


        assertTrue(add);
        assertTrue(add2);
        assertTrue(add3);
        assertEquals(2, h.size());

    }



    @Test(timeout = 4000)
    public void test86() throws Throwable {
        UMeR umer = new UMeR();
        Auxiliar aux = new Auxiliar();
        Driver d1 = aux.getDriver();
        boolean add3 = umer.registerCompany(d1.getCompany(), "123");
        umer.registerUser(d1, d1.getCompany());
        HashMap<String, Driver> map = umer.getAllDrivers();
        assertEquals(1, map.size());


    }


    @Test(timeout = 4000)
    public void test87() throws Throwable {
        Point2D.Double x = new Point2D.Double(5, 8);
        UMeR umer = new UMeR();
        Auxiliar aux = new Auxiliar();
        Driver d1 = aux.getDriver();
        d1.setVehicle("1");
        boolean user = umer.registerUser(d1, null);

        assertTrue(user);
        Vehicle v = new Car("1", 0.5, x, d1.getEmail());

        boolean reg = umer.registerVehicleP(v);
        assertTrue(reg);

        String err = umer.getAllDrivers().get(d1.getEmail()).getVehicle();

        if (err == null) fail("Nao encontrou veiculo");

        //Mudar disponibilidade
        umer.changeDriverAvailability(d1.getEmail(), false);

        boolean avail = umer.getAllDrivers().get(d1.getEmail()).isAvailable();

        assertFalse(avail);

    }

    @Test(timeout = 4000)
    public void test90() throws Throwable {
        Point2D.Double x = new Point2D.Double(5, 8);
        Point2D.Double dest = new Point2D.Double(50, 80);
        //Criar
        UMeR umer = new UMeR();
        Auxiliar aux = new Auxiliar();
        Client c1 = aux.getClient();
        Driver d1 = aux.getDriver();
        d1.setVehicle("1");
        Vehicle v = new Car("1", 0.5, x, d1.getEmail());

        // Registar
        boolean user = umer.registerUser(d1, null);
        boolean reg = umer.registerVehicleP(v);
        boolean add = umer.registerUser(c1, null);

        Trip t = umer.newTrip(c1, d1, v, dest);

        if (t == null) fail();


    }

    @Test(timeout = 4000)
    public void test91() throws Throwable {
        Point2D.Double x = new Point2D.Double(5, 8);
        Point2D.Double dest = new Point2D.Double(50, 80);
        //Criar
        UMeR umer = new UMeR();
        Auxiliar aux = new Auxiliar();
        Client c1 = aux.getClient();
        Driver d1 = aux.getDriver();
        d1.setVehicle("1");
        Vehicle v = new Car("1", 0.5, x, d1.getEmail());

        // Registar
        boolean user = umer.registerUser(d1, null);
        boolean reg = umer.registerVehicleP(v);
        boolean add = umer.registerUser(c1, null);
        umer.changeDriverAvailability(d1.getEmail(), false);

        Driver dd = umer.getAllDrivers().get(d1.getEmail());
        Trip t = umer.newTrip(c1, dd, v, dest);

        boolean b = umer.getAllDrivers().get(d1.getEmail()).isAvailable();

        assertFalse(b);

        if (t == null) {
            assertTrue(true);
        } else {
            fail();
        }

    }

    @Test(timeout = 4000)
    public void test92() throws Throwable {
        Point2D.Double x = new Point2D.Double(5, 8);
        Point2D.Double dest = new Point2D.Double(50, 80);
        //Criar
        UMeR umer = new UMeR();
        Auxiliar aux = new Auxiliar();
        Client c1 = aux.getClient();
        Driver d1 = aux.getDriver();
        d1.setVehicle("1");
        Vehicle v = new Car("1", 0.5, x, d1.getEmail());

        // Registar
        boolean user = umer.registerUser(d1, null);
        boolean reg = umer.registerVehicleP(v);
        boolean add = umer.registerUser(c1, null);

        Trip t = umer.newTripSpecific(c1, d1.getEmail(), dest);

        if (t == null) fail();


    }


    @Test(timeout = 4000)
    public void test93() throws Throwable {
        Point2D.Double x = new Point2D.Double(5, 8);
        Point2D.Double dest = new Point2D.Double(50, 80);


        //Criar
        UMeR umer = new UMeR();
        Auxiliar aux = new Auxiliar();

        umer.registerCompany("taxiC", "123");
        Client c1 = aux.getClient();
        Driver d1 = aux.getDriver();
        d1.setVehicle("1");
        Vehicle v = new Car("1", 0.5, x, d1.getEmail());

        // Registar
        boolean user = umer.registerUser(d1, d1.getCompany());
        boolean add = umer.registerUser(c1, null);
        boolean comp = umer.registerCompanyVehicle("taxiC", v);

        assertTrue(comp);

        Trip t = umer.newTripSpecific(c1, "taxiC", dest);

        if (t == null) fail();


    }

    @Test(timeout = 4000)
    public void test94() throws Throwable {
        Point2D.Double x = new Point2D.Double(5, 8);
        Point2D.Double dest = new Point2D.Double(50, 80);
        //Criar
        UMeR umer = new UMeR();
        Auxiliar aux = new Auxiliar();
        Client c1 = aux.getClient();
        Driver d1 = aux.getDriver();
        d1.setVehicle("1");
        Vehicle v = new Car("1", 0.5, x, d1.getEmail());
        v.setAvailable(true);

        // Registar
        boolean user = umer.registerUser(d1, null);
        boolean reg = umer.registerVehicleP(v);
        boolean add = umer.registerUser(c1, null);

        assertTrue(user);
        assertTrue(reg);
        assertTrue(add);

        Driver driver = umer.getAllDrivers().get(d1.getEmail());

        if (driver == null) fail("Condutor nao existe");

        Vehicle vehicle = umer.getAllVehicles().get("1");

        if (vehicle == null) fail("Veiculo nao existe");


        Trip t = umer.newTripSpecific(c1, d1.getEmail(), dest);

        if (t == null) fail();


    }

    @Test(timeout = 4000)
    public void test95() throws Throwable {
        Point2D.Double x = new Point2D.Double(5, 8);
        Point2D.Double dest = new Point2D.Double(50, 80);

        UMeR umer = new UMeR();
        Auxiliar aux = new Auxiliar();

        Client c1 = aux.getClient();
        Driver d1 = aux.getDriver();
        d1.setVehicle("1");
        Vehicle v = new Car("1", 0.5, x, d1.getEmail());
        v.setAvailable(true);

        boolean user = umer.registerUser(d1, null);
        boolean reg = umer.registerVehicleP(v);
        boolean add = umer.registerUser(c1, null);

        umer.addQueue(c1.getEmail(), d1.getEmail(), x, dest);
    }

    @Test(timeout = 4000)
    public void test96() throws Throwable {
        Point2D.Double x = new Point2D.Double(5, 8);
        Point2D.Double dest = new Point2D.Double(50, 80);

        UMeR umer = new UMeR();
        Auxiliar aux = new Auxiliar();

        Client c1 = aux.getClient();
        Driver d1 = aux.getDriver();
        d1.setVehicle("1");
        Vehicle v = new Car("1", 0.5, x, d1.getEmail());
        v.setAvailable(true);

        boolean user = umer.registerUser(d1, null);
        boolean reg = umer.registerVehicleP(v);
        boolean add = umer.registerUser(c1, null);

        Trip t = umer.newTripClosest(c1,dest);

    }
    @Test(timeout = 4000)
    public void test97() throws Throwable {
        Point2D.Double x = new Point2D.Double(5, 8);
        Point2D.Double dest = new Point2D.Double(50, 80);

        UMeR umer = new UMeR();
        Auxiliar aux = new Auxiliar();

        Client c1 = aux.getClient();
        Driver d1 = aux.getDriver();
        d1.setVehicle("1");
        Vehicle v = new Car("1", 0.5, x, d1.getEmail());
        v.setAvailable(true);

        boolean user = umer.registerUser(d1, null);
        boolean reg = umer.registerVehicleP(v);
        boolean add = umer.registerUser(c1, null);
        umer.changeDriverAvailability(d1.getEmail(), false);
        Trip t = umer.newTripClosest(c1,dest);

    }

    @Test(timeout = 4000)
    public void test98() throws Throwable {
        Point2D.Double x = new Point2D.Double(5, 8);
        Point2D.Double dest = new Point2D.Double(50, 80);
        //Criar
        UMeR umer = new UMeR();
        Auxiliar aux = new Auxiliar();
        Client c1 = aux.getClient();
        Driver d1 = aux.getDriver3();
        d1.setVehicle("1");
        Vehicle v = new Car("1", 0.5, x, d1.getEmail());

        // Registar
        boolean user = umer.registerUser(d1, null);
        boolean reg = umer.registerVehicleP(v);
        boolean add = umer.registerUser(c1, null);

        Trip t = umer.newTrip(c1, d1, v, dest);

        umer.addTrip(t.getClient(),t.getDriver(),t.getLicencePlate(),t);

        //Verificar que as viagens estao nos clientes:
        ArrayList<Trip> c = umer.getClients().get(c1.getEmail()).getTrips();
        ArrayList<Trip> dr = umer.getAllDrivers().get(d1.getEmail()).getTrips();
        ArrayList<Trip> vi = umer.getVehiclesP().get("1").getTrips();
        assertEquals(1,c.size());
        assertEquals(1,dr.size());
        assertEquals(1,vi.size());

    }

    @Test(timeout = 4000)
    public void test99() throws Throwable {
        UMeR umer = new UMeR();
        boolean reg = umer.registerCompany("ola","123");
        reg = umer.registerCompany("ola","123");
        assertFalse(reg);


    }

    @Test(timeout = 4000)
    public void test100() throws Throwable {
        Point2D.Double x = new Point2D.Double(5, 8);
        Point2D.Double dest = new Point2D.Double(50, 80);
        //Criar
        UMeR umer = new UMeR();
        Auxiliar aux = new Auxiliar();
        Client c1 = aux.getClient();
        Driver d1 = aux.getDriver();
        d1.setVehicle("1");
        Vehicle v = new Car("1", 0.5, x, d1.getEmail());

        // Registar
        boolean comp = umer.registerCompany("taxiC","123");
        boolean user = umer.registerUser(d1, d1.getCompany());
        boolean reg = umer.registerVehicleP(v);
        boolean add = umer.registerUser(c1, null);

        Trip t = umer.newTrip(c1, d1, v, dest);

        umer.addTrip(t.getClient(),t.getDriver(),t.getLicencePlate(),t);


    }
    @Test(timeout = 4000)
    public void test101() throws Throwable {
        Point2D.Double x = new Point2D.Double(5, 8);
        UMeR umer = new UMeR();
        Auxiliar aux = new Auxiliar();
        Trip t = aux.getTrip();
        Client c1 = aux.getClient();
        Driver d1 = aux.getDriver();
        d1.setVehicle("1");
        Vehicle v = new Car("1", 0.5, x, d1.getEmail());

        // Registar
        boolean comp = umer.registerCompany("taxiC","123");
        boolean user = umer.registerUser(d1, d1.getCompany());
        boolean reg = umer.registerVehicleP(v);
        boolean add = umer.registerUser(c1, null);


        umer.addTrip(t.getClient(),t.getDriver(),t.getLicencePlate(),t);

        System.out.println("TRIP ID:::  " + t.getID());

        umer.addRating(t.getDriver(),100,t.getID());

        ArrayList<Trip> hash  = umer.getTrips();
        Trip t2 = hash.get(0);

        assertEquals(100,t2.getRating(),0.01);

    }

    @Test(timeout = 4000)
    public void test102() throws Throwable {
        Auxiliar aux = new Auxiliar();
        UMeR umer = aux.getUmer();

        TreeSet<Driver> drivers = umer.ordDriver(new MoneyComparatorD());
        assertEquals(1,drivers.size(),0.01);


    }

    @Test(timeout = 4000)
    public void test103() throws Throwable {
        Auxiliar aux = new Auxiliar();
        UMeR umer = aux.getUmer();
        try {
            UMeR umer2 = umer.loadUMeR("umerData");
        } catch(Exception e) {

        }
       // System.out.println("Número de clientes: " + umer2.getClients().size());

    }

    @Test(timeout = 4000)
    public void test104() throws Throwable {

        //Objetivo: Criar uma queue e executa-la
        Auxiliar aux = new Auxiliar();
        UMeR umer = new UMeR();
        //Posicoes
        Point2D.Double x = new Point2D.Double(5, 8);
        Point2D.Double dest = new Point2D.Double(50, 80);

        // Criar objetos
        Client c1 = aux.getClient();
        Driver d1 = aux.getDriver();
        d1.setVehicle("1");
        Vehicle v = new Car("1", 0.5, x, d1.getEmail());

        //Registar Objetos
        boolean comp = umer.registerCompany("taxiC","123");
        boolean user = umer.registerUser(d1, d1.getCompany());
        boolean reg = umer.registerVehicleP(v);
        boolean add = umer.registerUser(c1, null);

        //Retirar disponibilidade
        umer.changeDriverAvailability(d1.getEmail(), false);

        //Criar viagem
        Trip t = umer.newTripSpecific(c1,d1.getEmail(),dest);

        assertEquals(null,null);

        //Confirmar que existe fila no cliente e no veiculo do condutor
        HashMap<String,ArrayList<Point2D.Double> > lista = umer.getAllVehicles().get(v.getLicencePlate()).getQueueInfo();
        assertEquals(1,lista.size());

        String c2 = umer.getClients().get(c1.getEmail()).getQueue();

        if (c2==null) fail();

        umer.doAllTripsQueue(d1.getEmail());


    }

    @Test(timeout = 4000)
    public void test105() throws Throwable {
        Auxiliar aux = new Auxiliar();
        UMeR umer = aux.getUmer();

        TreeSet<Client> drivers = umer.ordClient(new MoneyComparatorC());
        assertEquals(1,drivers.size(),0.01);


    }
    @Test(timeout = 4000)
    public void test106() throws Throwable {
        Point2D.Double x = new Point2D.Double(5, 8);

        Auxiliar aux = new Auxiliar();
        UMeR umer = aux.getUmer();
        Driver d = aux.getDriver3();
        Vehicle v = new Car("1", 0.5, x, d.getEmail());
        d.setVehicle(v.getLicencePlate());

        umer.registerUser(d,null);
        umer.registerVehicleP(v);


        HashMap<String,Vehicle> lista = umer.getVehiclesP();

        assertEquals(1,lista.size(),0.1);



    }
    @Test(timeout = 4000)
    public void test107() throws Throwable {
        Auxiliar aux = new Auxiliar();
        UMeR umer = aux.getUmer();


        ArrayList<String> lista = umer.getDates();
        assertEquals(1,lista.size(),0.1);


    }
    @Test(timeout = 4000)
    public void test108() throws Throwable {
        Auxiliar aux = new Auxiliar();
        UMeR umer = aux.getUmer();


        umer.changeDriverVehicle("d1@gmail.com","1");



    }

    @Test(timeout = 4000)
    public void test109() throws Throwable {
        Auxiliar aux = new Auxiliar();
        UMeR umer = aux.getUmer();


        //Objetivo:cANCELAR uma queue
        //Posicoes
        Point2D.Double x = new Point2D.Double(5, 8);
        Point2D.Double dest = new Point2D.Double(50, 80);

        // Criar objetos
        Client c1 = aux.getClient();
        Driver d1 = aux.getDriver();
        d1.setVehicle("1");
        Vehicle v = new Car("1", 0.5, x, d1.getEmail());

        //Registar Objetos
        boolean comp = umer.registerCompany("taxiC","123");
        boolean user = umer.registerUser(d1, d1.getCompany());
        boolean reg = umer.registerVehicleP(v);
        boolean add = umer.registerUser(c1, null);

        //Retirar disponibilidade
        umer.changeDriverAvailability(d1.getEmail(), false);

        //Criar viagem
        Trip t = umer.newTripSpecific(c1,d1.getEmail(),dest);

        umer.cancelTripQueue(c1.getEmail());



    }

    @Test(timeout = 4000)
    public void test110() throws Throwable {

        //Objetivo: newTrip Closest para empresa;
        Auxiliar aux = new Auxiliar();
        UMeR umer = new UMeR();

        //Posicoes
        Point2D.Double x = new Point2D.Double(5, 8);
        Point2D.Double dest = new Point2D.Double(50, 80);

        // Criar objetos
        Client c1 = aux.getClient();
        Driver d1 = aux.getDriver();
        Vehicle v = new Car("1", 0.5, x, "taxiC");


        //Registar Objetos
        boolean comp = umer.registerCompany("taxiC","123");
        boolean user = umer.registerUser(d1, d1.getCompany());
        boolean reg = umer.registerCompanyVehicle("taxiC",v);
        boolean add = umer.registerUser(c1, null);


        Driver d = umer.getAllDrivers().get(v.getOwner());

        if (d != null ) fail();

        Trip t = umer.newTripClosest(c1,dest);

        if (t==null) fail();




    }

    @Test(timeout = 4000)
    public void test111() throws Throwable {
        Auxiliar aux = new Auxiliar();
        UMeR umer = aux.getUmer();

        umer.saveUMeR("gravar");
        umer.loadUMeR("gravar");


    }

    @Test(timeout = 4000)
    public void test112() throws Throwable {
        Auxiliar aux = new Auxiliar();
        UMeR umer = new UMeR();
        Driver d1 = aux.getDriver();
        boolean user = umer.registerUser(d1, null);

        HashMap<String,User> all = umer.allUsers();

        assertEquals(1,all.size(),0.01);

    }
}
