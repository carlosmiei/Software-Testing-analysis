/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 12 22:25:46 GMT 2018
 */


import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.geom.Point2D;
import java.time.Clock;
import java.time.LocalDate;
import java.time.Period;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.time.chrono.IsoChronology;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockClock;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.evosuite.runtime.mock.java.time.chrono.MockIsoChronology;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Trip_ESTest extends Trip_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double((-384), (-384));
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds((-384));
      Clock clock0 = MockClock.system(zoneOffset0);
      LocalDate localDate0 = MockLocalDate.now(clock0);
      Trip trip0 = new Trip((-384), point2D_Double0, point2D_Double0, (Double) point2D_Double0.y, (Double) point2D_Double0.y, localDate0, "bR6N_c:+il^$VBW_uE)", "bR6N_c:+il^$VBW_uE)", "", (-384), (-1933.730917), point2D_Double0, (-384.0), (-1933.730917), 2585.79176753);
      String string0 = trip0.toString();
      assertEquals("Viagem de (-384.0,-384.0) ---> (-384.0,-384.0)\nData : 2014-02-14\nDist\u00E2ncia : 0km\nDura\u00E7\u00E3o prevista : -1933h:-44m:-51s\nDura\u00E7\u00E3o real : -384h:0m:0s\nPre\u00E7o : -384\u20AC\nEmail condutor : bR6N_c:+il^$VBW_uE)\nEmail cliente : \nMatr\u00EDcula ve\u00EDculo : bR6N_c:+il^$VBW_uE)\nClassifica\u00E7\u00E3o : -384**\nPosi\u00E7\u00E3o inicial do taxi : [-384.0,-384.0]\nTempo previsto at\u00E9 ao cliente : -384h:0m:0s\nTempo real at\u00E9 ao cliente : -1933h:-44m:-51s\nPre\u00E7o estimado : 2585\u20AC\nTrip id : -384", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double(0, (-1414.784782098));
      Double double0 = new Double(0.0);
      Period period0 = Period.ZERO;
      IsoChronology isoChronology0 = period0.getChronology();
      LocalDate localDate0 = MockIsoChronology.dateNow(isoChronology0);
      Trip trip0 = new Trip(0, point2D_Double0, point2D_Double0, double0, (Double) point2D_Double0.y, localDate0, (String) null, (String) null, (String) null, 0, (-1414.784782098), point2D_Double0, 0.0, 0.0, 0.0);
      Double double1 = trip0.getTime();
      assertEquals(0.0, (double)double1, 0.01);
      assertEquals(0.0, trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals(0, trip0.getID());
      assertEquals(0, trip0.getRating());
      assertEquals(0.0, trip0.getRealTimeToClient(), 0.01);
      assertEquals(0.0, trip0.getEstimatedPrice(), 0.01);
      assertEquals((-1414.784782098), trip0.getEstimatedTimeToDest(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double(0, 3600.0);
      LocalDate localDate0 = MockLocalDate.ofEpochDay(2836L);
      Trip trip0 = new Trip(0, point2D_Double0, point2D_Double0, (Double) point2D_Double0.y, (Double) 0.0, localDate0, "l", "l", "l", 3231, 0.0, point2D_Double0, 0, 0, 1.0);
      Double double0 = trip0.getTime();
      assertEquals(0.0, trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals(1.0, trip0.getEstimatedPrice(), 0.01);
      assertEquals(0, trip0.getID());
      assertEquals(0.0, trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals(3231, trip0.getRating());
      assertEquals(3600.0, (double)double0, 0.01);
      assertEquals(0.0, trip0.getRealTimeToClient(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      Clock clock0 = MockClock.systemUTC();
      LocalDate localDate0 = MockLocalDate.now(clock0);
      Trip trip0 = new Trip(2939, point2D_Double0, point2D_Double0, (Double) 0.0, (Double) point2D_Double0.y, localDate0, "4PCd.x:", "", "", (-1), 0.0, point2D_Double0, 2939.0, 2939, (-1));
      double double0 = trip0.getRealTimeToClient();
      assertEquals(2939, trip0.getID());
      assertEquals((-1), trip0.getRating());
      assertEquals(2939.0, trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals(2939.0, double0, 0.01);
      assertEquals((-1.0), trip0.getEstimatedPrice(), 0.01);
      assertEquals(0.0, trip0.getEstimatedTimeToDest(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);
      Clock clock0 = MockClock.tickMinutes(zoneOffset0);
      LocalDate localDate0 = MockLocalDate.now(clock0);
      Trip trip0 = new Trip(1, point2D_Double0, point2D_Double0, (Double) point2D_Double0.y, (Double) 0.0, localDate0, "", "ufAAoU-}cGE2K`W", "", 0, 0.0, point2D_Double0, 0.0, (-1.0), 0);
      double double0 = trip0.getRealTimeToClient();
      assertEquals(0.0, trip0.getEstimatedPrice(), 0.01);
      assertEquals(0.0, trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals(0, trip0.getRating());
      assertEquals(1, trip0.getID());
      assertEquals(0.0, trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double(0, (-1414.784782098));
      Period period0 = Period.ZERO;
      IsoChronology isoChronology0 = period0.getChronology();
      LocalDate localDate0 = MockIsoChronology.dateNow(isoChronology0);
      Trip trip0 = new Trip(0, point2D_Double0, point2D_Double0, (Double) point2D_Double0.y, (Double) point2D_Double0.y, localDate0, (String) null, (String) null, (String) null, 0, (-1414.784782098), point2D_Double0, 0.0, 0.0, 0.0);
      int int0 = trip0.getRating();
      assertEquals(0, trip0.getID());
      assertEquals(0.0, trip0.getRealTimeToClient(), 0.01);
      assertEquals((-1414.784782098), trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals(0.0, trip0.getEstimatedPrice(), 0.01);
      assertEquals(0.0, trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      LocalDate localDate0 = MockLocalDate.ofYearDay(1, 1);
      Trip trip0 = new Trip((-1), point2D_Double0, point2D_Double0, (Double) 0.0, (Double) point2D_Double0.y, localDate0, "", "", "", 1, 0.0, point2D_Double0, 1, 0.0, 0.0);
      int int0 = trip0.getRating();
      assertEquals(0.0, trip0.getRealTimeToClient(), 0.01);
      assertEquals(0.0, trip0.getEstimatedPrice(), 0.01);
      assertEquals(1.0, trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals(0.0, trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals(1, int0);
      assertEquals((-1), trip0.getID());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      Clock clock0 = MockClock.systemUTC();
      LocalDate localDate0 = MockLocalDate.now(clock0);
      Trip trip0 = new Trip(2939, point2D_Double0, point2D_Double0, (Double) 0.0, (Double) point2D_Double0.x, localDate0, "4PCd.x:", "", "", (-1), 0.0, point2D_Double0, 2939.0, 2939, (-1));
      Double double0 = trip0.getPrice();
      assertEquals(0.0, (double)double0, 0.01);
      assertEquals((-1), trip0.getRating());
      assertEquals(2939.0, trip0.getRealTimeToClient(), 0.01);
      assertEquals(2939, trip0.getID());
      assertEquals(2939.0, trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals((-1.0), trip0.getEstimatedPrice(), 0.01);
      assertEquals(0.0, trip0.getEstimatedTimeToDest(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double(0.0, 3600.0);
      LocalDate localDate0 = MockLocalDate.ofEpochDay(1);
      Trip trip0 = new Trip(1, point2D_Double0, point2D_Double0, (Double) point2D_Double0.y, (Double) point2D_Double0.y, localDate0, "", "}/;afaHlLc'%", "5^WIQK 4~|Gs`AfL4I", 1, 1, point2D_Double0, 1, 2785.2150457924135, (-1333.597230562831));
      Double double0 = trip0.getPrice();
      assertEquals(1, trip0.getRating());
      assertEquals(2785.2150457924135, trip0.getRealTimeToClient(), 0.01);
      assertEquals(3600.0, (double)double0, 0.01);
      assertEquals((-1333.597230562831), trip0.getEstimatedPrice(), 0.01);
      assertEquals(1.0, trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals(1.0, trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals(1, trip0.getID());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Trip trip0 = new Trip();
      trip0.getLicencePlate();
      assertEquals(0.0, trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals(0.0, trip0.getTime(), 0.01);
      assertEquals(0.0, trip0.getRealTimeToClient(), 0.01);
      assertEquals(0, trip0.getID());
      assertEquals(0.0, trip0.getEstimatedPrice(), 0.01);
      assertEquals(0.0, trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals(0.0, trip0.getPrice(), 0.01);
      assertEquals(0, trip0.getRating());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      LocalDate localDate0 = MockLocalDate.ofYearDay(1, 1);
      Trip trip0 = new Trip((-1), point2D_Double0, point2D_Double0, (Double) 0.0, (Double) point2D_Double0.x, localDate0, "", "", "", 1, 0.0, point2D_Double0, 1, 0.0, 0.0);
      trip0.getLicencePlate();
      assertEquals(0.0, trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals(0.0, trip0.getEstimatedPrice(), 0.01);
      assertEquals(0.0, trip0.getRealTimeToClient(), 0.01);
      assertEquals(1, trip0.getRating());
      assertEquals((-1), trip0.getID());
      assertEquals(1.0, trip0.getEstimatedTimeToClient(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double(2742, 2742);
      LocalDate localDate0 = MockLocalDate.now();
      Trip trip0 = new Trip(2742, point2D_Double0, point2D_Double0, (Double) point2D_Double0.y, (Double) 2742.0, localDate0, "", "", "v|{bM-<j\"/O`)", 2742, 3459.989005377256, point2D_Double0, (-422.758799845), (-1523.723), 2742.0);
      int int0 = trip0.getID();
      assertEquals(3459.989005377256, trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals(2742.0, trip0.getEstimatedPrice(), 0.01);
      assertEquals((-1523.723), trip0.getRealTimeToClient(), 0.01);
      assertEquals((-422.758799845), trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals(2742, int0);
      assertEquals(2742, trip0.getRating());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      LocalDate localDate0 = MockLocalDate.ofYearDay(1, 1);
      Trip trip0 = new Trip((-1), point2D_Double0, point2D_Double0, (Double) 0.0, (Double) point2D_Double0.y, localDate0, "", "", "", 1, 0.0, point2D_Double0, 1, 0.0, 0.0);
      int int0 = trip0.getID();
      assertEquals(1, trip0.getRating());
      assertEquals((-1), int0);
      assertEquals(0.0, trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals(0.0, trip0.getEstimatedPrice(), 0.01);
      assertEquals(0.0, trip0.getRealTimeToClient(), 0.01);
      assertEquals(1.0, trip0.getEstimatedTimeToClient(), 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      Clock clock0 = MockClock.systemUTC();
      LocalDate localDate0 = MockLocalDate.now(clock0);
      Trip trip0 = new Trip(2939, point2D_Double0, point2D_Double0, (Double) 0.0, (Double) point2D_Double0.y, localDate0, "4PCd.x:", "", "", (-1), 0.0, point2D_Double0, 2939.0, 2939, (-1));
      double double0 = trip0.getEstimatedTimeToDest();
      assertEquals(2939.0, trip0.getRealTimeToClient(), 0.01);
      assertEquals(2939.0, trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals((-1.0), trip0.getEstimatedPrice(), 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(2939, trip0.getID());
      assertEquals((-1), trip0.getRating());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double(0, (-1414.784782098));
      Period period0 = Period.ZERO;
      IsoChronology isoChronology0 = period0.getChronology();
      LocalDate localDate0 = MockIsoChronology.dateNow(isoChronology0);
      Trip trip0 = new Trip(0, point2D_Double0, point2D_Double0, (Double) point2D_Double0.x, (Double) point2D_Double0.x, localDate0, (String) null, (String) null, (String) null, 0, (-1414.784782098), point2D_Double0, 0.0, 0.0, 0.0);
      double double0 = trip0.getEstimatedTimeToDest();
      assertEquals(0.0, trip0.getEstimatedPrice(), 0.01);
      assertEquals(0, trip0.getID());
      assertEquals((-1414.784782098), double0, 0.01);
      assertEquals(0, trip0.getRating());
      assertEquals(0.0, trip0.getRealTimeToClient(), 0.01);
      assertEquals(0.0, trip0.getEstimatedTimeToClient(), 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Trip trip0 = new Trip();
      double double0 = trip0.getEstimatedTimeToClient();
      assertEquals(0.0, trip0.getPrice(), 0.01);
      assertEquals(0, trip0.getRating());
      assertEquals(0, trip0.getID());
      assertEquals(0.0, trip0.getRealTimeToClient(), 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, trip0.getEstimatedPrice(), 0.01);
      assertEquals(0.0, trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals(0.0, trip0.getTime(), 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      LocalDate localDate0 = MockLocalDate.ofYearDay(1, 1);
      Trip trip0 = new Trip((-1), point2D_Double0, point2D_Double0, (Double) 0.0, (Double) point2D_Double0.x, localDate0, "", "", "", 1, 0.0, point2D_Double0, 1, 0.0, 0.0);
      double double0 = trip0.getEstimatedTimeToClient();
      assertEquals(1, trip0.getRating());
      assertEquals(0.0, trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals(1.0, double0, 0.01);
      assertEquals(0.0, trip0.getEstimatedPrice(), 0.01);
      assertEquals(0.0, trip0.getRealTimeToClient(), 0.01);
      assertEquals((-1), trip0.getID());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      LocalDate localDate0 = MockLocalDate.now();
      Trip trip0 = new Trip(1, point2D_Double0, point2D_Double0, (Double) point2D_Double0.y, (Double) point2D_Double0.x, localDate0, "", "9\"|h{eAP(' >99Y$.I", "}Ex8~1 g6Xqv{Y7", 0, 1605.00773788, point2D_Double0, (-3059.79), 0.0, 0);
      double double0 = trip0.getEstimatedPrice();
      assertEquals(0, trip0.getRating());
      assertEquals((-3059.79), trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals(1605.00773788, trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, trip0.getRealTimeToClient(), 0.01);
      assertEquals(1, trip0.getID());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      Clock clock0 = MockClock.systemUTC();
      LocalDate localDate0 = MockLocalDate.now(clock0);
      Trip trip0 = new Trip(2939, point2D_Double0, point2D_Double0, (Double) 0.0, (Double) point2D_Double0.x, localDate0, "4PCd.x:", "", "", (-1), 0.0, point2D_Double0, 2939.0, 2939, (-1));
      double double0 = trip0.getEstimatedPrice();
      assertEquals(2939, trip0.getID());
      assertEquals((-1), trip0.getRating());
      assertEquals(2939.0, trip0.getRealTimeToClient(), 0.01);
      assertEquals((-1.0), double0, 0.01);
      assertEquals(2939.0, trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals(0.0, trip0.getEstimatedTimeToDest(), 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double(0, (-1414.784782098));
      Period period0 = Period.ZERO;
      IsoChronology isoChronology0 = period0.getChronology();
      LocalDate localDate0 = MockIsoChronology.dateNow(isoChronology0);
      Trip trip0 = new Trip(0, point2D_Double0, point2D_Double0, (Double) point2D_Double0.y, (Double) point2D_Double0.y, localDate0, (String) null, (String) null, (String) null, 0, (-1414.784782098), point2D_Double0, 0.0, 0.0, 0.0);
      trip0.getDriver();
      assertEquals(0.0, trip0.getRealTimeToClient(), 0.01);
      assertEquals(0.0, trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals((-1414.784782098), trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals(0.0, trip0.getEstimatedPrice(), 0.01);
      assertEquals(0, trip0.getID());
      assertEquals(0, trip0.getRating());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      ZoneId zoneId0 = ZoneId.systemDefault();
      Clock clock0 = MockClock.tickSeconds(zoneId0);
      LocalDate localDate0 = MockLocalDate.now(clock0);
      Trip trip0 = new Trip(0, point2D_Double0, point2D_Double0, (Double) 0.0, (Double) point2D_Double0.y, localDate0, "/A5", "/A5", "/A5", (-3244), 0.0, point2D_Double0, 3600.0, 0.0, 1.0);
      trip0.getDriver();
      assertEquals(0.0, trip0.getRealTimeToClient(), 0.01);
      assertEquals(1.0, trip0.getEstimatedPrice(), 0.01);
      assertEquals(3600.0, trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals(0, trip0.getID());
      assertEquals(0.0, trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals((-3244), trip0.getRating());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Trip trip0 = new Trip();
      trip0.getClient();
      assertEquals(0.0, trip0.getRealTimeToClient(), 0.01);
      assertEquals(0.0, trip0.getTime(), 0.01);
      assertEquals(0.0, trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals(0.0, trip0.getEstimatedPrice(), 0.01);
      assertEquals(0.0, trip0.getPrice(), 0.01);
      assertEquals(0, trip0.getRating());
      assertEquals(0, trip0.getID());
      assertEquals(0.0, trip0.getEstimatedTimeToClient(), 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double(0, 0);
      Period period0 = Period.of(0, (-38), 383);
      IsoChronology isoChronology0 = period0.getChronology();
      LocalDate localDate0 = MockIsoChronology.dateNow(isoChronology0);
      Trip trip0 = new Trip(0, point2D_Double0, point2D_Double0, (Double) 0.0, (Double) 0.0, localDate0, "Zn[<@", "", "Zn[<@", 92, 0, point2D_Double0, (-4332.78778188496), 0.0, 0.0);
      trip0.getClient();
      assertEquals(0, trip0.getID());
      assertEquals(0.0, trip0.getEstimatedPrice(), 0.01);
      assertEquals(92, trip0.getRating());
      assertEquals(0.0, trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals((-4332.78778188496), trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals(0.0, trip0.getRealTimeToClient(), 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double(0.0, (-1.0));
      Point2D.Double point2D_Double1 = new Point2D.Double();
      Clock clock0 = MockClock.systemUTC();
      LocalDate localDate0 = MockLocalDate.now(clock0);
      Trip trip0 = new Trip(789, point2D_Double0, point2D_Double1, (Double) 0.0, (Double) 0.0, localDate0, "", "", "", 0, 332.0, point2D_Double1, 2406.418554, 1.0, 60.0);
      trip0.distance();
      assertEquals(2406.418554, trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals(60.0, trip0.getEstimatedPrice(), 0.01);
      assertEquals(789, trip0.getID());
      assertEquals(332.0, trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals(0, trip0.getRating());
      assertEquals(1.0, trip0.getRealTimeToClient(), 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      LocalDate localDate0 = MockLocalDate.now();
      Trip trip0 = new Trip(2939, point2D_Double0, point2D_Double0, (Double) 0.0, (Double) 0.0, localDate0, "*", "*", "*", (-1), (-1), point2D_Double0, 0.0, 2939, (-1));
      trip0.setRating(2939);
      trip0.clone();
      assertEquals(2939, trip0.getRating());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      LocalDate localDate0 = MockLocalDate.now();
      Trip trip0 = new Trip(1, point2D_Double0, point2D_Double0, (Double) point2D_Double0.x, (Double) point2D_Double0.x, localDate0, "", "9\"|h{eAP(' >99Y$.I", "}Ex8~1 g6Xqv{Y7", 0, 1605.00773788, point2D_Double0, (-3059.79), 0.0, 0);
      Trip trip1 = trip0.clone();
      assertEquals(0.0, trip0.getRealTimeToClient(), 0.01);
      assertEquals(1605.00773788, trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals(0.0, trip0.getTime(), 0.01);
      assertEquals(0.0, trip0.getEstimatedPrice(), 0.01);
      assertEquals(0.0, trip0.getPrice(), 0.01);
      assertEquals(0, trip1.getRating());
      assertEquals((-3059.79), trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals(1, trip0.getID());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      Clock clock0 = MockClock.systemUTC();
      LocalDate localDate0 = MockLocalDate.now(clock0);
      Trip trip0 = new Trip(2939, point2D_Double0, point2D_Double0, (Double) 0.0, (Double) point2D_Double0.x, localDate0, "4PCd.x:", "", "", (-1), 0.0, point2D_Double0, 2939.0, 2939, (-1));
      trip0.clone();
      assertEquals(0.0, trip0.getTime(), 0.01);
      assertEquals((-1.0), trip0.getEstimatedPrice(), 0.01);
      assertEquals(2939, trip0.getID());
      assertEquals((-1), trip0.getRating());
      assertEquals(2939.0, trip0.getRealTimeToClient(), 0.01);
      assertEquals(0.0, trip0.getPrice(), 0.01);
      assertEquals(0.0, trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals(2939.0, trip0.getEstimatedTimeToClient(), 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      LocalDate localDate0 = MockLocalDate.now();
      Trip trip0 = new Trip(0, point2D_Double0, point2D_Double0, (Double) 0.0, (Double) point2D_Double0.y, localDate0, "Sz:j$~:U)*", "Sz:j$~:U)*", "\nPre\u00E7o estimado : ", 0, 0.0, point2D_Double0, 0.0, (-3233.1107044043), 0.0);
      Trip trip1 = trip0.clone();
      assertEquals(0.0, trip0.getPrice(), 0.01);
      assertEquals(0, trip1.getRating());
      assertEquals(0, trip1.getID());
      assertEquals(0.0, trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals(0.0, trip0.getEstimatedPrice(), 0.01);
      assertEquals((-3233.1107044043), trip0.getRealTimeToClient(), 0.01);
      assertEquals(0.0, trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals(0.0, trip0.getTime(), 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double((-384), (-384));
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds((-384));
      Clock clock0 = MockClock.system(zoneOffset0);
      LocalDate localDate0 = MockLocalDate.now(clock0);
      Trip trip0 = new Trip((-384), point2D_Double0, point2D_Double0, (Double) point2D_Double0.x, (Double) point2D_Double0.x, localDate0, "bR6N_c:+il^$VBW_uE)", "bR6N_c:+il^$VBW_uE)", "", (-384), (-1933.730917), point2D_Double0, (-384.0), (-1933.730917), 2585.79176753);
      trip0.clone();
      assertEquals((-1933.730917), trip0.getRealTimeToClient(), 0.01);
      assertEquals(2585.79176753, trip0.getEstimatedPrice(), 0.01);
      assertEquals((-384), trip0.getID());
      assertEquals((-384), trip0.getRating());
      assertEquals((-384.0), trip0.getTime(), 0.01);
      assertEquals((-1933.730917), trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals((-384.0), trip0.getPrice(), 0.01);
      assertEquals((-384.0), trip0.getEstimatedTimeToClient(), 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Trip trip0 = new Trip();
      // Undeclared exception!
      try { 
        trip0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Trip", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Trip trip0 = new Trip();
      // Undeclared exception!
      try { 
        trip0.getTaxiPos();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Trip", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Trip trip0 = new Trip();
      // Undeclared exception!
      try { 
        trip0.clone();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Trip", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double(3372.216397714, 3372.216397714);
      Trip trip0 = null;
      try {
        trip0 = new Trip(0, point2D_Double0, point2D_Double0, (Double) point2D_Double0.x, (Double) point2D_Double0.x, (LocalDate) null, (String) null, (String) null, (String) null, 0, 1313.887, point2D_Double0, 0.0, 0.0, 1313.887);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Trip", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double((-384), (-384));
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds((-384));
      Clock clock0 = MockClock.system(zoneOffset0);
      LocalDate localDate0 = MockLocalDate.now(clock0);
      Trip trip0 = new Trip((-384), point2D_Double0, point2D_Double0, (Double) point2D_Double0.x, (Double) point2D_Double0.y, localDate0, "bR6N_c:+il^$VBW_uE)", "bR6N_c:+il^$VBW_uE)", "", (-384), (-1933.730917), point2D_Double0, (-384.0), (-1933.730917), 2585.79176753);
      int int0 = trip0.getRating();
      assertEquals((-384.0), trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals((-384), int0);
      assertEquals((-384), trip0.getID());
      assertEquals((-1933.730917), trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals((-1933.730917), trip0.getRealTimeToClient(), 0.01);
      assertEquals(2585.79176753, trip0.getEstimatedPrice(), 0.01);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double((-1056), (-1056));
      LocalDate localDate0 = MockLocalDate.now();
      Trip trip0 = new Trip((-1056), point2D_Double0, point2D_Double0, (Double) point2D_Double0.x, (Double) point2D_Double0.x, localDate0, "g}y55`@X", "g}y55`@X", "g}y55`@X", (-1056), (-3597.397122935869), point2D_Double0, (-1056.0), (-1649.26), (-1056.0));
      Double double0 = trip0.getPrice();
      assertEquals((-1056.0), (double)double0, 0.01);
      assertEquals((-1649.26), trip0.getRealTimeToClient(), 0.01);
      assertEquals((-1056.0), trip0.getEstimatedPrice(), 0.01);
      assertEquals((-1056), trip0.getID());
      assertEquals((-3597.397122935869), trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals((-1056), trip0.getRating());
      assertEquals((-1056.0), trip0.getEstimatedTimeToClient(), 0.01);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      Clock clock0 = MockClock.systemUTC();
      LocalDate localDate0 = MockLocalDate.now(clock0);
      Trip trip0 = new Trip(2939, point2D_Double0, point2D_Double0, (Double) 0.0, (Double) point2D_Double0.x, localDate0, "4PCd.x:", "", "", (-1), 0.0, point2D_Double0, 2939.0, 2939, (-1));
      trip0.getClient();
      assertEquals(0.0, trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals(2939.0, trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals((-1.0), trip0.getEstimatedPrice(), 0.01);
      assertEquals((-1), trip0.getRating());
      assertEquals(2939, trip0.getID());
      assertEquals(2939.0, trip0.getRealTimeToClient(), 0.01);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      LocalDate localDate0 = MockLocalDate.ofYearDay(1, 1);
      Trip trip0 = new Trip((-1), point2D_Double0, point2D_Double0, (Double) 0.0, (Double) point2D_Double0.x, localDate0, "", "", "", 1, 0.0, point2D_Double0, 1, 0.0, 0.0);
      trip0.getDriver();
      assertEquals(1, trip0.getRating());
      assertEquals(1.0, trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals((-1), trip0.getID());
      assertEquals(0.0, trip0.getRealTimeToClient(), 0.01);
      assertEquals(0.0, trip0.getEstimatedPrice(), 0.01);
      assertEquals(0.0, trip0.getEstimatedTimeToDest(), 0.01);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double((-384), (-384));
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds((-384));
      Clock clock0 = MockClock.system(zoneOffset0);
      LocalDate localDate0 = MockLocalDate.now(clock0);
      Trip trip0 = new Trip((-384), point2D_Double0, point2D_Double0, (Double) point2D_Double0.y, (Double) point2D_Double0.y, localDate0, "bR6N_c:+il^$VBW_uE)", "bR6N_c:+il^$VBW_uE)", "", (-384), (-1933.730917), point2D_Double0, (-384.0), (-1933.730917), 2585.79176753);
      Double double0 = trip0.getTime();
      assertEquals(2585.79176753, trip0.getEstimatedPrice(), 0.01);
      assertEquals((-384), trip0.getRating());
      assertEquals((-1933.730917), trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals((-1933.730917), trip0.getRealTimeToClient(), 0.01);
      assertEquals((-384), trip0.getID());
      assertEquals((-384.0), trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals((-384.0), (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double((-384), (-384));
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds((-384));
      Clock clock0 = MockClock.system(zoneOffset0);
      LocalDate localDate0 = MockLocalDate.now(clock0);
      Trip trip0 = new Trip((-384), point2D_Double0, point2D_Double0, (Double) point2D_Double0.x, (Double) point2D_Double0.x, localDate0, "bR6N_c:+il^$VBW_uE)", "bR6N_c:+il^$VBW_uE)", "", (-384), (-1933.730917), point2D_Double0, (-384.0), (-1933.730917), 2585.79176753);
      trip0.getStart();
      assertEquals((-1933.730917), trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals((-384), trip0.getID());
      assertEquals(2585.79176753, trip0.getEstimatedPrice(), 0.01);
      assertEquals((-1933.730917), trip0.getRealTimeToClient(), 0.01);
      assertEquals((-384.0), trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals((-384), trip0.getRating());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      LocalDate localDate0 = MockLocalDate.now();
      Trip trip0 = new Trip(0, point2D_Double0, point2D_Double0, (Double) point2D_Double0.y, (Double) (-1.0), localDate0, "z/9", "z/9", "{,`v(q7e[b", (-4594), 120.648389867, point2D_Double0, 0.0, (-1137.65308058243), (-4594));
      double double0 = trip0.getEstimatedTimeToDest();
      assertEquals((-4594), trip0.getRating());
      assertEquals(0, trip0.getID());
      assertEquals((-1137.65308058243), trip0.getRealTimeToClient(), 0.01);
      assertEquals((-4594.0), trip0.getEstimatedPrice(), 0.01);
      assertEquals(0.0, trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals(120.648389867, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      Clock clock0 = MockClock.systemUTC();
      LocalDate localDate0 = MockLocalDate.now(clock0);
      Trip trip0 = new Trip(2939, point2D_Double0, point2D_Double0, (Double) 0.0, (Double) point2D_Double0.y, localDate0, "4PCd.x:", "", "", (-1), 0.0, point2D_Double0, 2939.0, 2939, (-1));
      trip0.getTaxiPos();
      assertEquals((-1), trip0.getRating());
      assertEquals(2939.0, trip0.getRealTimeToClient(), 0.01);
      assertEquals(2939, trip0.getID());
      assertEquals(0.0, trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals((-1.0), trip0.getEstimatedPrice(), 0.01);
      assertEquals(2939.0, trip0.getEstimatedTimeToClient(), 0.01);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double((-384), (-384));
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds((-384));
      Clock clock0 = MockClock.system(zoneOffset0);
      LocalDate localDate0 = MockLocalDate.now(clock0);
      Trip trip0 = new Trip((-384), point2D_Double0, point2D_Double0, (Double) point2D_Double0.y, (Double) point2D_Double0.y, localDate0, "bR6N_c:+il^$VBW_uE)", "bR6N_c:+il^$VBW_uE)", "", (-384), (-1933.730917), point2D_Double0, (-384.0), (-1933.730917), 2585.79176753);
      trip0.getEnd();
      assertEquals((-384), trip0.getID());
      assertEquals((-1933.730917), trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals(2585.79176753, trip0.getEstimatedPrice(), 0.01);
      assertEquals((-1933.730917), trip0.getRealTimeToClient(), 0.01);
      assertEquals((-384.0), trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals((-384), trip0.getRating());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double((-384), (-384));
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds((-384));
      Clock clock0 = MockClock.system(zoneOffset0);
      LocalDate localDate0 = MockLocalDate.now(clock0);
      Trip trip0 = new Trip((-384), point2D_Double0, point2D_Double0, (Double) point2D_Double0.y, (Double) point2D_Double0.y, localDate0, "bR6N_c:+il^$VBW_uE)", "bR6N_c:+il^$VBW_uE)", "", (-384), (-1933.730917), point2D_Double0, (-384.0), (-1933.730917), 2585.79176753);
      double double0 = trip0.getEstimatedTimeToClient();
      assertEquals((-384), trip0.getID());
      assertEquals((-384), trip0.getRating());
      assertEquals((-1933.730917), trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals(2585.79176753, trip0.getEstimatedPrice(), 0.01);
      assertEquals((-1933.730917), trip0.getRealTimeToClient(), 0.01);
      assertEquals((-384.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double((-384), (-384));
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds((-384));
      Clock clock0 = MockClock.system(zoneOffset0);
      LocalDate localDate0 = MockLocalDate.now(clock0);
      Trip trip0 = new Trip((-384), point2D_Double0, point2D_Double0, (Double) point2D_Double0.y, (Double) point2D_Double0.y, localDate0, "bR6N_c:+il^$VBW_uE)", "bR6N_c:+il^$VBW_uE)", "", (-384), (-1933.730917), point2D_Double0, (-384.0), (-1933.730917), 2585.79176753);
      double double0 = trip0.getEstimatedPrice();
      assertEquals(2585.79176753, double0, 0.01);
      assertEquals((-384.0), trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals((-384), trip0.getRating());
      assertEquals((-1933.730917), trip0.getRealTimeToClient(), 0.01);
      assertEquals((-384), trip0.getID());
      assertEquals((-1933.730917), trip0.getEstimatedTimeToDest(), 0.01);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      LocalDate localDate0 = MockLocalDate.now();
      Trip trip0 = new Trip(0, point2D_Double0, point2D_Double0, (Double) point2D_Double0.x, (Double) (-1.0), localDate0, "z/9", "z/9", "{,`v(q7e[b", (-4594), 120.648389867, point2D_Double0, 0.0, (-1137.65308058243), (-4594));
      trip0.getLicencePlate();
      assertEquals(0.0, trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals((-4594.0), trip0.getEstimatedPrice(), 0.01);
      assertEquals((-1137.65308058243), trip0.getRealTimeToClient(), 0.01);
      assertEquals(120.648389867, trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals((-4594), trip0.getRating());
      assertEquals(0, trip0.getID());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      ZoneId zoneId0 = ZoneId.systemDefault();
      Clock clock0 = MockClock.tickSeconds(zoneId0);
      LocalDate localDate0 = MockLocalDate.now(clock0);
      Trip trip0 = new Trip(0, point2D_Double0, point2D_Double0, (Double) 0.0, (Double) point2D_Double0.x, localDate0, "/A5", "/A5", "/A5", (-3244), 0.0, point2D_Double0, 3600.0, 0.0, 1.0);
      trip0.getDate();
      assertEquals(0.0, trip0.getRealTimeToClient(), 0.01);
      assertEquals(1.0, trip0.getEstimatedPrice(), 0.01);
      assertEquals(0.0, trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals((-3244), trip0.getRating());
      assertEquals(3600.0, trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals(0, trip0.getID());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double(0, (-1414.784782098));
      Period period0 = Period.ZERO;
      IsoChronology isoChronology0 = period0.getChronology();
      LocalDate localDate0 = MockIsoChronology.dateNow(isoChronology0);
      Trip trip0 = new Trip(0, point2D_Double0, point2D_Double0, (Double) point2D_Double0.x, (Double) point2D_Double0.y, localDate0, (String) null, (String) null, (String) null, 0, (-1414.784782098), point2D_Double0, 0.0, 0.0, 0.0);
      trip0.distance();
      assertEquals(0.0, trip0.getEstimatedPrice(), 0.01);
      assertEquals(0, trip0.getID());
      assertEquals((-1414.784782098), trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals(0.0, trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals(0, trip0.getRating());
      assertEquals(0.0, trip0.getRealTimeToClient(), 0.01);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double(0, (-1414.784782098));
      Period period0 = Period.ZERO;
      IsoChronology isoChronology0 = period0.getChronology();
      LocalDate localDate0 = MockIsoChronology.dateNow(isoChronology0);
      Trip trip0 = new Trip(0, point2D_Double0, point2D_Double0, (Double) point2D_Double0.y, (Double) point2D_Double0.x, localDate0, (String) null, (String) null, (String) null, 0, (-1414.784782098), point2D_Double0, 0.0, 0.0, 0.0);
      double double0 = trip0.getRealTimeToClient();
      assertEquals((-1414.784782098), trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals(0.0, trip0.getEstimatedPrice(), 0.01);
      assertEquals(0, trip0.getRating());
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, trip0.getID());
      assertEquals(0.0, trip0.getEstimatedTimeToClient(), 0.01);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double(0, (-1414.784782098));
      Period period0 = Period.ZERO;
      IsoChronology isoChronology0 = period0.getChronology();
      LocalDate localDate0 = MockIsoChronology.dateNow(isoChronology0);
      Trip trip0 = new Trip(0, point2D_Double0, point2D_Double0, (Double) point2D_Double0.y, (Double) point2D_Double0.y, localDate0, (String) null, (String) null, (String) null, 0, (-1414.784782098), point2D_Double0, 0.0, 0.0, 0.0);
      int int0 = trip0.getID();
      assertEquals(0, trip0.getRating());
      assertEquals((-1414.784782098), trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals(0.0, trip0.getEstimatedPrice(), 0.01);
      assertEquals(0.0, trip0.getRealTimeToClient(), 0.01);
      assertEquals(0, int0);
      assertEquals(0.0, trip0.getEstimatedTimeToClient(), 0.01);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      LocalDate localDate0 = MockLocalDate.now();
      Trip trip0 = new Trip(2939, point2D_Double0, point2D_Double0, (Double) 0.0, (Double) 0.0, localDate0, "*", "*", "*", (-1), (-1), point2D_Double0, 0.0, 2939, (-1));
      String string0 = trip0.toString();
      assertEquals("Viagem de (0.0,0.0) ---> (0.0,0.0)\nData : 2014-02-14\nDist\u00E2ncia : 0km\nDura\u00E7\u00E3o prevista : -1h:0m:0s\nDura\u00E7\u00E3o real : 0h:0m:0s\nPre\u00E7o : 0\u20AC\nEmail condutor : *\nEmail cliente : *\nMatr\u00EDcula ve\u00EDculo : *\nClassifica\u00E7\u00E3o : N\u00E3o classificado\nPosi\u00E7\u00E3o inicial do taxi : [0.0,0.0]\nTempo previsto at\u00E9 ao cliente : 0h:0m:0s\nTempo real at\u00E9 ao cliente : 2939h:0m:0s\nPre\u00E7o estimado : -1\u20AC\nTrip id : 2939", string0);
      assertEquals(0.0, trip0.getEstimatedTimeToClient(), 0.01);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Trip trip0 = new Trip();
      Trip trip1 = null;
      try {
        trip1 = new Trip(trip0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Trip", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      LocalDate localDate0 = MockLocalDate.now();
      Trip trip0 = new Trip(2939, point2D_Double0, point2D_Double0, (Double) 0.0, (Double) 0.0, localDate0, "*", "*", "*", (-1), (-1), point2D_Double0, 0.0, 2939, (-1));
      Trip trip1 = new Trip(trip0);
      assertEquals((-1), trip0.getRating());
      assertEquals((-1.0), trip0.getEstimatedPrice(), 0.01);
      assertEquals((-1.0), trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals(0.0, trip0.getPrice(), 0.01);
      assertEquals(0.0, trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals(2939.0, trip0.getRealTimeToClient(), 0.01);
      assertEquals(0.0, trip0.getTime(), 0.01);
      assertEquals(2939, trip0.getID());
  }
}
