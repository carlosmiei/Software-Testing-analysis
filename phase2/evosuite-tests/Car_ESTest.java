/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 12 22:14:29 GMT 2018
 */


import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.geom.Point2D;
import java.util.HashMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Car_ESTest extends Car_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      Car car0 = new Car("fD~)YFr2V=*|k}Z~2;?", (-1102.0891), point2D_Double0, "&d^Hc,p\"p0^,p5#");
      HashMap<String, Vehicle> hashMap0 = new HashMap<String, Vehicle>();
      Point2D.Double point2D_Double1 = new Point2D.Double(0.0, 2);
      Van van0 = new Van("&d^Hc,p\"p0^,p5#", (-1012.823808827097), point2D_Double1, "fD~)YFr2V=*|k}Z~2;?");
      hashMap0.put("fD~)YFr2V=*|k}Z~2;?", van0);
      int int0 = car0.calculateTraffic(hashMap0);
      assertEquals(65.0, car0.getSpeed(), 0.01);
      assertEquals(1.5, car0.getPrice(), 0.01);
      assertEquals(4, car0.getSeats());
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double(1110.0, 1110.0);
      Car car0 = new Car("wiB=Z", 0.0, point2D_Double0, "wiB=Z");
      Car car1 = car0.clone();
      assertEquals(65.0, car1.getSpeed(), 0.01);
      assertEquals(1.5, car0.getPrice(), 0.01);
      assertEquals(4, car1.getSeats());
      assertEquals(4, car0.getSeats());
      assertEquals(65.0, car0.getSpeed(), 0.01);
      assertEquals(1.5, car1.getPrice(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      Car car0 = new Car("I_q^F", 110.0, point2D_Double0, "I_q^F");
      Car car1 = car0.clone();
      assertEquals(1.5, car1.getPrice(), 0.01);
      assertEquals(4, car0.getSeats());
      assertEquals(1.5, car0.getPrice(), 0.01);
      assertEquals(65.0, car0.getSpeed(), 0.01);
      assertEquals(65.0, car1.getSpeed(), 0.01);
      assertEquals(4, car1.getSeats());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      Car car0 = new Car("", (-1373.764493592577), point2D_Double0, "");
      Trip trip0 = new Trip();
      car0.addTrip(trip0);
      // Undeclared exception!
      try { 
        car0.clone();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Trip", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      Car car0 = new Car("o)OV+0Si*H1*\"#'", 110.0, point2D_Double0, "\nDura\u00E7\u00E3o real : ");
      // Undeclared exception!
      try { 
        car0.calculateTraffic((HashMap<String, Vehicle>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Car", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Car car0 = null;
      try {
        car0 = new Car((Car) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Car", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      Car car0 = new Car("I_q^F", 110.0, point2D_Double0, "I_q^F");
      Car car1 = new Car(car0);
      assertEquals(65.0, car1.getSpeed(), 0.01);
      assertEquals(4, car1.getSeats());
      assertEquals(1.5, car0.getPrice(), 0.01);
      assertEquals(1.5, car1.getPrice(), 0.01);
      assertEquals(4, car0.getSeats());
      assertEquals(65.0, car0.getSpeed(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      Car car0 = new Car("fD~()YFr2V=*|k}Z~2;?", (-1128.055882242549), point2D_Double0, "fD~()YFr2V=*|k}Z~2;?");
      HashMap<String, Vehicle> hashMap0 = new HashMap<String, Vehicle>();
      Point2D.Double point2D_Double1 = new Point2D.Double((-1128.055882242549), 2);
      Van van0 = new Van("fD~()YFr2V=*|k}Z~2;?", 0.0, point2D_Double1, "fD~()YFr2V=*|k}Z~2;?");
      hashMap0.put("fD~()YFr2V=*|k}Z~2;?", van0);
      int int0 = car0.calculateTraffic(hashMap0);
      assertEquals(1.5, car0.getPrice(), 0.01);
      assertEquals(2, int0);
      assertEquals(4, car0.getSeats());
      assertEquals(65.0, car0.getSpeed(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      Car car0 = new Car("fD~()YFr2V=*|k}Z~2;?", (-1128.055882242549), point2D_Double0, "fD~()YFr2V=*|k}Z~2;?");
      HashMap<String, Vehicle> hashMap0 = new HashMap<String, Vehicle>();
      Van van0 = new Van("fD~()YFr2V=*|k}Z~2;?", 0.0, point2D_Double0, "fD~()YFr2V=*|k}Z~2;?");
      hashMap0.put("fD~()YFr2V=*|k}Z~2;?", van0);
      int int0 = car0.calculateTraffic(hashMap0);
      assertEquals(1.5, car0.getPrice(), 0.01);
      assertEquals(65.0, car0.getSpeed(), 0.01);
      assertEquals(4, car0.getSeats());
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      Car car0 = new Car("fD~()YFr2V=*|k}Z~2;?", (-1128.055882242549), point2D_Double0, "fD~()YFr2V=*|k}Z~2;?");
      Car car1 = car0.clone();
      assertEquals(65.0, car1.getSpeed(), 0.01);
      assertEquals(1.5, car0.getPrice(), 0.01);
      assertEquals(1.5, car1.getPrice(), 0.01);
      assertEquals(4, car1.getSeats());
      assertEquals(65.0, car0.getSpeed(), 0.01);
      assertEquals(4, car0.getSeats());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Car car0 = null;
      try {
        car0 = new Car("", 1.0, (Point2D.Double) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Vehicle", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Car car0 = null;
      try {
        car0 = new Car();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
