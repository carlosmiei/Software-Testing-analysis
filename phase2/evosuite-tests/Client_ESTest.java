/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 12 22:08:23 GMT 2018
 */


import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.geom.Point2D;
import java.time.DateTimeException;
import java.time.LocalDate;
import java.time.Period;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.time.chrono.IsoChronology;
import java.util.ArrayList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.evosuite.runtime.mock.java.time.chrono.MockIsoChronology;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Client_ESTest extends Client_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.ofEpochDay((-1L));
      Client client0 = new Client("}kD", "}nz7E:7Rrfo~/F+h,k", "}kD", "Client", localDate0);
      Point2D.Double point2D_Double0 = client0.getPosition();
      Point2D.Double point2D_Double1 = client0.getPosition();
      point2D_Double0.setLocation((double) (-1L), 0.0);
      Trip trip0 = new Trip(2, point2D_Double1, point2D_Double0, (Double) (-1.0), (Double) point2D_Double1.x, localDate0, "Utilizador - }nz7E:7Rrfo~/F+h,k\neMail : }kD\nPassword : }kD\nMorada : Client\nData de nascimento : 1969-12-31\nDist\u00E2ncia Total : 0.0\nDinheiro gasto/ganho : 0.0\nN\u00FAmero de viagens :0\nPosi\u00E7\u00E3o : (0.0,0.0)\nPontos : 0\nPremium : false\nFila de espera : null", "", "}nz7E:7Rrfo~/F+h,k", 2, 1482.209547, point2D_Double0, 0.0, (-173.0200456234521), 0.0);
      client0.addTrip(trip0);
      assertFalse(point2D_Double1.equals((Object)point2D_Double0));
      assertEquals(0, client0.getPoints());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.ofEpochDay((-1L));
      Client client0 = new Client("}kD", "}nz7E:7Rrfo~/F+h,k", "}kD", "Client", localDate0);
      Point2D.Double point2D_Double0 = client0.getPosition();
      Double double0 = new Double(1482.209547);
      Trip trip0 = new Trip(2, point2D_Double0, point2D_Double0, (Double) (-1.0), double0, localDate0, "Utilizador - }nz7E:7Rrfo~/F+h,k\neMail : }kD\nPassword : }kD\nMorada : Client\nData de nascimento : 1969-12-31\nDist\u00E2ncia Total : 0.0\nDinheiro gasto/ganho : 0.0\nN\u00FAmero de viagens :0\nPosi\u00E7\u00E3o : (0.0,0.0)\nPontos : 0\nPremium : false\nFila de espera : null", "", "}nz7E:7Rrfo~/F+h,k", 2, 1482.209547, point2D_Double0, 0.0, (-173.0200456234521), 0.0);
      client0.addTrip(trip0);
      assertEquals(741, client0.getPoints());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.now();
      Client client0 = new Client("M,](%", "M,](%", "M,](%", "M,](%", localDate0);
      assertFalse(client0.isPremium());
      
      client0.setPremium(true);
      boolean boolean0 = client0.isPremium();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Period period0 = Period.of(469, 469, 0);
      IsoChronology isoChronology0 = period0.getChronology();
      ZoneId zoneId0 = ZoneId.systemDefault();
      LocalDate localDate0 = MockIsoChronology.dateNow(isoChronology0, zoneId0);
      Client client0 = new Client("uIo~<Hnbe", "uIo~<Hnbe", "", "\neMail : ", localDate0);
      client0.setQueue("qPWMI3!YF3_V-");
      client0.getQueue();
      assertFalse(client0.isPremium());
      assertEquals(0, client0.getPoints());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(4);
      LocalDate localDate0 = MockLocalDate.now((ZoneId) zoneOffset0);
      Point2D.Double point2D_Double0 = new Point2D.Double(4, 4);
      ArrayList<Trip> arrayList0 = new ArrayList<Trip>();
      Client client0 = new Client("jh6qem*Qbonu=c4", "jh6qem*Qbonu=c4", "9urd=(V1bR5Wxc{,.", "9urd=(V1bR5Wxc{,.", localDate0, point2D_Double0, 4, arrayList0, 4, 0.0, false, "jh6qem*Qbonu=c4");
      client0.setQueue("");
      client0.getQueue();
      assertFalse(client0.isPremium());
      assertEquals(4, client0.getPoints());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Period period0 = Period.ZERO;
      IsoChronology isoChronology0 = period0.getChronology();
      LocalDate localDate0 = MockIsoChronology.dateNow(isoChronology0);
      Point2D.Double point2D_Double0 = new Point2D.Double(0.0, 3165.03588084503);
      ArrayList<Trip> arrayList0 = new ArrayList<Trip>();
      Client client0 = new Client("\neMail : ", "`(8/L}?uT@,VyW", "N`^%:yZ\"$", "`(8/L}?uT@,VyW", localDate0, point2D_Double0, (-1.0), arrayList0, 2450, 3165.03588084503, true, "");
      int int0 = client0.getPoints();
      assertTrue(client0.isPremium());
      assertEquals(2450, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.now();
      Client client0 = new Client("", ")\nPontos : ", "", "", localDate0);
      client0.setPoints((-2388));
      int int0 = client0.getPoints();
      assertEquals((-2388), int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.now();
      Client client0 = new Client("", ")\nPontos : ", "", "", localDate0);
      client0.setTotalDistance(2.0);
      Client client1 = client0.clone();
      assertFalse(client1.isPremium());
      assertEquals(0, client1.getPoints());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.now();
      Client client0 = new Client("8j\"Sjr8LDX>R!jT&+f]", "tD5!3Mxv\"?Wijw>", "\nEmail cliente : ", ")\nData : ", localDate0);
      client0.setTotalDistance((-1.0));
      Client client1 = client0.clone();
      assertEquals(0, client1.getPoints());
      assertFalse(client1.isPremium());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.now();
      Client client0 = new Client("M,](%", "M,](%", "M,](%", "M,](%", localDate0);
      client0.setPoints((-1254));
      client0.clone();
      assertEquals((-1254), client0.getPoints());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.now();
      Client client0 = new Client("M,](%", "M,](%", "M,](%", "M,](%", localDate0);
      Point2D.Double point2D_Double0 = client0.getPosition();
      Trip trip0 = new Trip(0, point2D_Double0, point2D_Double0, (Double) 0.0, (Double) 0.0, localDate0, "Utilizador - M,](%\neMail : M,](%\nPassword : M,](%\nMorada : M,](%\nData de nascimento : 2014-02-14\nDist\u00E2ncia Total : 0.0\nDinheiro gasto/ganho : 0.0\nN\u00FAmero de viagens :0\nPosi\u00E7\u00E3o : (0.0,0.0)\nPontos : -1254\nPremium : true\nFila de espera : null", "p_ \"]YzODeBzc\"N", "Utilizador - M,](%\neMail : M,](%\nPassword : M,](%\nMorada : M,](%\nData de nascimento : 2014-02-14\nDist\u00E2ncia Total : 0.0\nDinheiro gasto/ganho : 0.0\nN\u00FAmero de viagens :0\nPosi\u00E7\u00E3o : (0.0,0.0)\nPontos : -1254\nPremium : true\nFila de espera : null", 2074, 2.0, point2D_Double0, 0.0, 4.0, (-1.0));
      client0.addTrip(trip0);
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertEquals(0.0, point2D_Double0.x, 0.01);
      
      Client client1 = client0.clone();
      assertEquals(0, client1.getPoints());
      assertFalse(client1.isPremium());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.ofEpochDay(0L);
      Point2D.Double point2D_Double0 = new Point2D.Double(0.0, 0.0);
      ArrayList<Trip> arrayList0 = new ArrayList<Trip>();
      Client client0 = new Client("", "", "!~\"@#H-5g@", "", localDate0, point2D_Double0, 0.0, arrayList0, 1, 1290.41997337, true, "");
      Client client1 = client0.clone();
      assertTrue(client1.isPremium());
      assertEquals(1, client0.getPoints());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.ofEpochDay((-853L));
      Point2D.Double point2D_Double0 = new Point2D.Double();
      Client client0 = new Client("Client", "6l?a>_U6_jL#;2.e!/R", "", "", localDate0, point2D_Double0, 0.0, (ArrayList<Trip>) null, 1128, (-492.862), false, "");
      Client client1 = client0.clone();
      assertFalse(client1.isPremium());
      assertEquals(1128, client0.getPoints());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.ofEpochDay(0L);
      Client client0 = new Client((String) null, "|mJlrRT%YW-", "i:>qsWGM[", "Tt=Y($P;,E", localDate0);
      // Undeclared exception!
      try { 
        client0.setPosition((Point2D.Double) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Client", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.now();
      Client client0 = new Client("s", "s", "s", "s", localDate0);
      Trip trip0 = new Trip();
      client0.addTrip(trip0);
      // Undeclared exception!
      try { 
        client0.clone();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Trip", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      ArrayList<Trip> arrayList0 = new ArrayList<Trip>();
      Client client0 = null;
      try {
        client0 = new Client(")\nData : ", ".~Vn)C<M^7^-j2FK", "", ".~Vn)C<M^7^-j2FK", (LocalDate) null, point2D_Double0, 2789.22675106, arrayList0, 1, 2789.22675106, true, ".~Vn)C<M^7^-j2FK");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("User", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Client client0 = null;
      try {
        client0 = new Client("", "", "User", "", (LocalDate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("User", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Client client0 = null;
      try {
        client0 = new Client((Client) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Client", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.now();
      Client client0 = new Client("", ")\nPontos : ", "", "", localDate0);
      boolean boolean0 = client0.isPremium();
      assertFalse(boolean0);
      assertEquals(0, client0.getPoints());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.ofEpochDay(2271L);
      Client client0 = new Client(") ---> (", "tZ-`-#yhH8%<Ocv]q", ") ---> (", "tZ-`-#yhH8%<Ocv]q", localDate0);
      Client client1 = new Client(client0);
      assertEquals(0, client1.getPoints());
      assertFalse(client1.isPremium());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.ofEpochDay(0L);
      Client client0 = new Client((String) null, "|mJlrRT%YW-", "i:>qsWGM[", "Tt=Y($P;,E", localDate0);
      int int0 = client0.getPoints();
      assertEquals(0, int0);
      assertFalse(client0.isPremium());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.now();
      Client client0 = new Client("(P-", "V @hhvK)pAA{hF=E", "(P-", "\nPosi\u00E7\u00E3o : (", localDate0);
      Point2D.Double point2D_Double0 = client0.getPosition();
      client0.setPosition(point2D_Double0);
      assertEquals(0, client0.getPoints());
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertFalse(client0.isPremium());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.now();
      Client client0 = new Client("(P-", "V @hhvK)pAA{hF=E", "(P-", "\nPosi\u00E7\u00E3o : (", localDate0);
      String string0 = client0.toString();
      assertEquals("Utilizador - V @hhvK)pAA{hF=E\neMail : (P-\nPassword : (P-\nMorada : \nPosi\u00E7\u00E3o : (\nData de nascimento : 2014-02-14\nDist\u00E2ncia Total : 0.0\nDinheiro gasto/ganho : 0.0\nN\u00FAmero de viagens :0\nPosi\u00E7\u00E3o : (0.0,0.0)\nPontos : 0\nPremium : false\nFila de espera : null", string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.now();
      Client client0 = new Client("(P-", "V @hhvK)pAA{hF=E", "(P-", "\nPosi\u00E7\u00E3o : (", localDate0);
      // Undeclared exception!
      try { 
        client0.addTrip((Trip) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("User", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Client client0 = null;
      try {
        client0 = new Client();
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Invalid value for MonthOfYear (valid values 1 - 12): 0
         //
         verifyException("java.time.temporal.ValueRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.now();
      Client client0 = new Client("(P-", "V @hhvK)pAA{hF=E", "(P-", "\nPosi\u00E7\u00E3o : (", localDate0);
      client0.getQueue();
      assertEquals(0, client0.getPoints());
      assertFalse(client0.isPremium());
  }
}
