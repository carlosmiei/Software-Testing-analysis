/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 12 22:24:11 GMT 2018
 */


import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.geom.Point2D;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.StreamCorruptedException;
import java.time.Clock;
import java.time.LocalDate;
import java.time.Month;
import java.time.Period;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.time.chrono.IsoChronology;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.HashMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.time.MockClock;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.evosuite.runtime.mock.java.time.chrono.MockIsoChronology;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class UMeR_ESTest extends UMeR_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      UMeR uMeR0 = new UMeR();
      Point2D.Double point2D_Double0 = new Point2D.Double((-1060.07469795195), 673.0);
      Period period0 = Period.ofYears(407);
      IsoChronology isoChronology0 = period0.getChronology();
      LocalDate localDate0 = MockIsoChronology.dateNow(isoChronology0);
      Driver driver0 = new Driver("?|kf;X:70t3%'JMbe\f", "?|kf;X:70t3%'JMbe\f", "?|kf;X:70t3%'JMbe\f", "?|kf;X:70t3%'JMbe\f", localDate0, 1214.8904, "?|kf;X:70t3%'JMbe\f");
      Car car0 = new Car("!di:4rY;:~6(eeX)", (-1060.07469795195), point2D_Double0, "?|kf;X:70t3%'JMbe\f");
      double double0 = uMeR0.realTime(point2D_Double0, point2D_Double0, driver0, car0);
      assertEquals(0.0, uMeR0.getMoneyGenerated(), 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, uMeR0.getTotalTime(), 0.01);
      assertEquals(0, uMeR0.getTripID());
      assertEquals(0, uMeR0.getWeather());
      assertEquals(0.0, uMeR0.getTotalDistance(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      UMeR uMeR0 = new UMeR();
      Point2D.Double point2D_Double0 = new Point2D.Double();
      double double0 = uMeR0.estimatedTime(point2D_Double0, point2D_Double0, 0.0);
      assertEquals(0.0, uMeR0.getTotalDistance(), 0.01);
      assertEquals(0.0, uMeR0.getTotalTime(), 0.01);
      assertEquals(0, uMeR0.getTripID());
      assertEquals(0, uMeR0.getWeather());
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(0.0, uMeR0.getMoneyGenerated(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      UMeR uMeR0 = new UMeR();
      uMeR0.setTripID((-1));
      int int0 = uMeR0.getTripID();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      UMeR uMeR0 = new UMeR();
      uMeR0.setTotalTime(1350.56016372);
      double double0 = uMeR0.getTotalTime();
      assertEquals(1350.56016372, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      UMeR uMeR0 = new UMeR();
      uMeR0.setMoneyGenerated(20);
      double double0 = uMeR0.getMoneyGenerated();
      assertEquals(20.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      UMeR uMeR0 = new UMeR();
      uMeR0.getCompanies();
      assertEquals(0, uMeR0.getTripID());
      assertEquals(0.0, uMeR0.getTotalTime(), 0.01);
      assertEquals(0, uMeR0.getWeather());
      assertEquals(0.0, uMeR0.getMoneyGenerated(), 0.01);
      assertEquals(0.0, uMeR0.getTotalDistance(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      UMeR uMeR0 = new UMeR();
      Point2D.Double point2D_Double0 = new Point2D.Double(566.218713003, 566.218713003);
      double double0 = uMeR0.estimatedTime(point2D_Double0, point2D_Double0, 566.218713003);
      assertEquals(0.0, uMeR0.getTotalTime(), 0.01);
      assertEquals(0, uMeR0.getTripID());
      assertEquals(0, uMeR0.getWeather());
      assertEquals(0.0, uMeR0.getTotalDistance(), 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, uMeR0.getMoneyGenerated(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      UMeR uMeR0 = new UMeR();
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        uMeR0.saveUMeR("Muito Bom");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      UMeR uMeR0 = new UMeR();
      try { 
        uMeR0.saveUMeR("");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      UMeR uMeR0 = new UMeR();
      // Undeclared exception!
      try { 
        uMeR0.registerVehicleP((Vehicle) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("UMeR", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      UMeR uMeR0 = new UMeR();
      // Undeclared exception!
      try { 
        uMeR0.registerUser((User) null, ")\nPontos : ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("UMeR", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      UMeR uMeR0 = new UMeR();
      Point2D.Double point2D_Double0 = new Point2D.Double((-1.0), 0.0);
      Bike bike0 = new Bike("Razo\u00E1vel", 0.0, point2D_Double0, "\nMorada : ");
      // Undeclared exception!
      try { 
        uMeR0.realTime(point2D_Double0, point2D_Double0, (Driver) null, bike0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("UMeR", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      UMeR uMeR0 = new UMeR();
      // Undeclared exception!
      try { 
        uMeR0.newTrip((Client) null, "D/7k", (Point2D.Double) null, (Point2D.Double) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("UMeR", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      UMeR uMeR0 = new UMeR();
      // Undeclared exception!
      try { 
        uMeR0.loginCheck((String) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
      try { 
        UMeR.loadUMeR((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("*~5Uj*t'cV2");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "oj\"Bi`37h!`6");
      try { 
        UMeR.loadUMeR("*~5Uj*t'cV2");
        fail("Expecting exception: StreamCorruptedException");
      
      } catch(StreamCorruptedException e) {
         //
         // invalid stream header: 6F6A2242
         //
         verifyException("java.io.ObjectInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      UMeR uMeR0 = new UMeR();
      // Undeclared exception!
      try { 
        uMeR0.doTripQueue("X|eq[g5kh{?CeK{rS");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("UMeR", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      UMeR uMeR0 = new UMeR();
      // Undeclared exception!
      try { 
        uMeR0.doAllTripsQueue("Razo\u00E1vel");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("UMeR", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      UMeR uMeR0 = new UMeR();
      // Undeclared exception!
      try { 
        uMeR0.changeDriverAvailability((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("UMeR", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      UMeR uMeR0 = new UMeR();
      Point2D.Double point2D_Double0 = new Point2D.Double(0.0, 2751.483100079098);
      // Undeclared exception!
      try { 
        uMeR0.addVehicle("OLRpe[m?`bMrugEOom", "OLRpe[m?`bMrugEOom", "OLRpe[m?`bMrugEOom", "OLRpe[m?`bMrugEOom", point2D_Double0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      UMeR uMeR0 = new UMeR();
      // Undeclared exception!
      try { 
        uMeR0.addTrip((String) null, "hnhy", ">$JrJg>~7ma3hmv", (Trip) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("UMeR", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      UMeR uMeR0 = new UMeR();
      Point2D.Double point2D_Double0 = new Point2D.Double();
      Van van0 = new Van("Kp H:$Y[O*a1}e#[J'", 0.0, point2D_Double0, (String) null);
      int int0 = uMeR0.calculateTraffic(van0, 0.0);
      assertEquals(0.0, uMeR0.getTotalTime(), 0.01);
      assertEquals(1, int0);
      assertEquals(0, uMeR0.getTripID());
      assertEquals(0, uMeR0.getWeather());
      assertEquals(0.0, uMeR0.getMoneyGenerated(), 0.01);
      assertEquals(0.0, uMeR0.getTotalDistance(), 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      UMeR uMeR0 = new UMeR();
      uMeR0.closestAvailableTaxi((Client) null);
      assertEquals(0.0, uMeR0.getTotalTime(), 0.01);
      assertEquals(0, uMeR0.getWeather());
      assertEquals(0, uMeR0.getTripID());
      assertEquals(0.0, uMeR0.getTotalDistance(), 0.01);
      assertEquals(0.0, uMeR0.getMoneyGenerated(), 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      UMeR uMeR0 = new UMeR();
      Point2D.Double point2D_Double0 = new Point2D.Double();
      Bike bike0 = new Bike("", 0.0, point2D_Double0, "");
      boolean boolean0 = uMeR0.registerCompanyVehicle("", bike0);
      assertEquals(0.0, uMeR0.getTotalTime(), 0.01);
      assertEquals(0.0, uMeR0.getMoneyGenerated(), 0.01);
      assertEquals(0, uMeR0.getWeather());
      assertEquals(0, uMeR0.getTripID());
      assertEquals(0.0, uMeR0.getTotalDistance(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      UMeR uMeR0 = new UMeR();
      LocalDate localDate0 = MockLocalDate.ofEpochDay(5048L);
      Client client0 = new Client("h:", (String) null, "Car", "E$6:?\"l8", localDate0);
      boolean boolean0 = uMeR0.registerUser(client0, "$n.FW");
      assertTrue(boolean0);
      assertEquals(0.0, uMeR0.getTotalTime(), 0.01);
      assertEquals(0.0, uMeR0.getMoneyGenerated(), 0.01);
      assertEquals(0.0, uMeR0.getTotalDistance(), 0.01);
      assertEquals(0, uMeR0.getWeather());
      assertEquals(0, uMeR0.getTripID());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      UMeR uMeR0 = new UMeR();
      uMeR0.allUsers();
      assertEquals(0.0, uMeR0.getTotalDistance(), 0.01);
      assertEquals(0, uMeR0.getWeather());
      assertEquals(0, uMeR0.getTripID());
      assertEquals(0.0, uMeR0.getMoneyGenerated(), 0.01);
      assertEquals(0.0, uMeR0.getTotalTime(), 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      UMeR uMeR0 = new UMeR();
      boolean boolean0 = uMeR0.registerCompany("`ic:BXT<H&s/", "`ic:BXT<H&s/");
      assertTrue(boolean0);
      
      uMeR0.getCompanies();
      assertEquals(0.0, uMeR0.getMoneyGenerated(), 0.01);
      assertEquals(0.0, uMeR0.getTotalTime(), 0.01);
      assertEquals(0, uMeR0.getTripID());
      assertEquals(0, uMeR0.getWeather());
      assertEquals(0.0, uMeR0.getTotalDistance(), 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      UMeR uMeR0 = new UMeR();
      // Undeclared exception!
      try { 
        uMeR0.estimatedTime((Point2D.Double) null, (Point2D.Double) null, 0.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("UMeR", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      UMeR uMeR0 = new UMeR();
      boolean boolean0 = uMeR0.loginCheck("?|kf;X:70t3%'JMbe\f", "Mik");
      assertEquals(0.0, uMeR0.getMoneyGenerated(), 0.01);
      assertEquals(0.0, uMeR0.getTotalTime(), 0.01);
      assertFalse(boolean0);
      assertEquals(0, uMeR0.getTripID());
      assertEquals(0, uMeR0.getWeather());
      assertEquals(0.0, uMeR0.getTotalDistance(), 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      UMeR uMeR0 = new UMeR();
      Point2D.Double point2D_Double0 = new Point2D.Double();
      boolean boolean0 = uMeR0.addVehicle("'K|~t>4-PR", ">$JrJg>~7ma3hmv", ">$JrJg>~7ma3hmv", "Mau", point2D_Double0, "Mau");
      assertEquals(0, uMeR0.getWeather());
      assertEquals(0, uMeR0.getTripID());
      assertEquals(0.0, uMeR0.getTotalTime(), 0.01);
      assertEquals(0.0, uMeR0.getMoneyGenerated(), 0.01);
      assertFalse(boolean0);
      assertEquals(0.0, uMeR0.getTotalDistance(), 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      UMeR uMeR0 = new UMeR();
      Point2D.Double point2D_Double0 = new Point2D.Double();
      boolean boolean0 = uMeR0.addVehicle("--condutor-mais-pr\u00F3ximo--", "--condutor-mais-pr\u00F3ximo--", "", "Muito Bom", point2D_Double0, ",");
      assertEquals(0, uMeR0.getTripID());
      assertFalse(boolean0);
      assertEquals(0.0, uMeR0.getMoneyGenerated(), 0.01);
      assertEquals(0.0, uMeR0.getTotalTime(), 0.01);
      assertEquals(0.0, uMeR0.getTotalDistance(), 0.01);
      assertEquals(0, uMeR0.getWeather());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      UMeR uMeR0 = new UMeR();
      Point2D.Double point2D_Double0 = new Point2D.Double();
      uMeR0.addVehicle("Zbh?`;N:I\"A", "", "km", "`ic:BXT<H&s/", point2D_Double0, "--condutor-mais-pr\u00F3ximo--");
      assertEquals(0.0, uMeR0.getTotalTime(), 0.01);
      assertEquals(0.0, uMeR0.getMoneyGenerated(), 0.01);
      assertEquals(0.0, uMeR0.getTotalDistance(), 0.01);
      assertEquals(0, uMeR0.getTripID());
      assertEquals(0, uMeR0.getWeather());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      UMeR uMeR0 = new UMeR();
      Point2D.Double point2D_Double0 = new Point2D.Double();
      uMeR0.addVehicle((String) null, "v>A3", "QR.-", (String) null, point2D_Double0, "v>A3");
      assertEquals(0.0, uMeR0.getTotalTime(), 0.01);
      assertEquals(0, uMeR0.getWeather());
      assertEquals(0, uMeR0.getTripID());
      assertEquals(0.0, uMeR0.getTotalDistance(), 0.01);
      assertEquals(0.0, uMeR0.getMoneyGenerated(), 0.01);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      UMeR uMeR0 = new UMeR();
      Point2D.Double point2D_Double0 = new Point2D.Double();
      uMeR0.addVehicle(">i1E#S~<rb5|", "m;>", (String) null, "0.[u|2Y>E;T", point2D_Double0, "mh^/ZzL9&Ae:z");
      assertEquals(0.0, uMeR0.getTotalTime(), 0.01);
      assertEquals(0.0, uMeR0.getMoneyGenerated(), 0.01);
      assertEquals(0.0, uMeR0.getTotalDistance(), 0.01);
      assertEquals(0, uMeR0.getWeather());
      assertEquals(0, uMeR0.getTripID());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      UMeR uMeR0 = new UMeR();
      Point2D.Double point2D_Double0 = new Point2D.Double();
      uMeR0.addVehicle("\nPre\u00E7o m\u00E9dio por km : ", (String) null, "\nPre\u00E7o m\u00E9dio por km : ", "", point2D_Double0, "");
      assertEquals(0, uMeR0.getWeather());
      assertEquals(0.0, uMeR0.getMoneyGenerated(), 0.01);
      assertEquals(0, uMeR0.getTripID());
      assertEquals(0.0, uMeR0.getTotalDistance(), 0.01);
      assertEquals(0.0, uMeR0.getTotalTime(), 0.01);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      UMeR uMeR0 = new UMeR();
      boolean boolean0 = uMeR0.addCompany("", "");
      assertEquals(0.0, uMeR0.getTotalDistance(), 0.01);
      assertEquals(0.0, uMeR0.getMoneyGenerated(), 0.01);
      assertEquals(0, uMeR0.getTripID());
      assertEquals(0, uMeR0.getWeather());
      assertFalse(boolean0);
      assertEquals(0.0, uMeR0.getTotalTime(), 0.01);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      UMeR uMeR0 = new UMeR();
      boolean boolean0 = uMeR0.addCompany("WL@t>5Po\"qh1 }", (String) null);
      assertEquals(0.0, uMeR0.getMoneyGenerated(), 0.01);
      assertFalse(boolean0);
      assertEquals(0.0, uMeR0.getTotalTime(), 0.01);
      assertEquals(0, uMeR0.getWeather());
      assertEquals(0, uMeR0.getTripID());
      assertEquals(0.0, uMeR0.getTotalDistance(), 0.01);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      UMeR uMeR0 = new UMeR();
      boolean boolean0 = uMeR0.addCompany((String) null, "Driver");
      assertEquals(0.0, uMeR0.getTotalDistance(), 0.01);
      assertFalse(boolean0);
      assertEquals(0, uMeR0.getWeather());
      assertEquals(0, uMeR0.getTripID());
      assertEquals(0.0, uMeR0.getMoneyGenerated(), 0.01);
      assertEquals(0.0, uMeR0.getTotalTime(), 0.01);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      UMeR uMeR0 = new UMeR();
      Period period0 = Period.of(827, 827, 827);
      IsoChronology isoChronology0 = period0.getChronology();
      LocalDate localDate0 = MockIsoChronology.dateNow(isoChronology0);
      boolean boolean0 = uMeR0.addDriver((String) null, "xXF&\"FfXT$~", "--condutor-mais-pr\u00F3ximo--", (String) null, localDate0, "\u00BA lugar :");
      assertEquals(0, uMeR0.getTripID());
      assertEquals(0, uMeR0.getWeather());
      assertEquals(0.0, uMeR0.getTotalTime(), 0.01);
      assertEquals(0.0, uMeR0.getMoneyGenerated(), 0.01);
      assertEquals(0.0, uMeR0.getTotalDistance(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      UMeR uMeR0 = new UMeR();
      ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(9, 9);
      LocalDate localDate0 = MockLocalDate.now((ZoneId) zoneOffset0);
      boolean boolean0 = uMeR0.addClient("Muito Bom", "", "", "--condutor-mais-pr\u00F3ximo--", localDate0);
      assertEquals(0.0, uMeR0.getTotalDistance(), 0.01);
      assertFalse(boolean0);
      assertEquals(0, uMeR0.getWeather());
      assertEquals(0, uMeR0.getTripID());
      assertEquals(0.0, uMeR0.getMoneyGenerated(), 0.01);
      assertEquals(0.0, uMeR0.getTotalTime(), 0.01);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      UMeR uMeR0 = new UMeR();
      LocalDate localDate0 = MockLocalDate.ofEpochDay(1L);
      boolean boolean0 = uMeR0.addClient("", "", (String) null, (String) null, localDate0);
      assertEquals(0, uMeR0.getTripID());
      assertEquals(0, uMeR0.getWeather());
      assertEquals(0.0, uMeR0.getTotalTime(), 0.01);
      assertFalse(boolean0);
      assertEquals(0.0, uMeR0.getMoneyGenerated(), 0.01);
      assertEquals(0.0, uMeR0.getTotalDistance(), 0.01);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      UMeR uMeR0 = new UMeR();
      Comparator<Driver> comparator0 = (Comparator<Driver>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      uMeR0.ordDriver(comparator0);
      assertEquals(0, uMeR0.getWeather());
      assertEquals(0, uMeR0.getTripID());
      assertEquals(0.0, uMeR0.getTotalDistance(), 0.01);
      assertEquals(0.0, uMeR0.getMoneyGenerated(), 0.01);
      assertEquals(0.0, uMeR0.getTotalTime(), 0.01);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      UMeR uMeR0 = new UMeR();
      Comparator<Client> comparator0 = (Comparator<Client>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      uMeR0.ordClient(comparator0);
      assertEquals(0, uMeR0.getWeather());
      assertEquals(0, uMeR0.getTripID());
      assertEquals(0.0, uMeR0.getTotalDistance(), 0.01);
      assertEquals(0.0, uMeR0.getMoneyGenerated(), 0.01);
      assertEquals(0.0, uMeR0.getTotalTime(), 0.01);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      UMeR uMeR0 = new UMeR();
      Point2D.Double point2D_Double0 = new Point2D.Double();
      boolean boolean0 = uMeR0.registerCompany("", "Helic\u00F3ptero");
      assertTrue(boolean0);
      
      uMeR0.newTripSpecific((Client) null, "", point2D_Double0);
      assertEquals(0.0, uMeR0.getMoneyGenerated(), 0.01);
      assertEquals(0.0, uMeR0.getTotalDistance(), 0.01);
      assertEquals(0.0, uMeR0.getTotalTime(), 0.01);
      assertEquals(0, uMeR0.getWeather());
      assertEquals(0, uMeR0.getTripID());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      UMeR uMeR0 = new UMeR();
      Point2D.Double point2D_Double0 = new Point2D.Double((-1060.07469795195), 673.0);
      Period period0 = Period.ofYears(407);
      IsoChronology isoChronology0 = period0.getChronology();
      LocalDate localDate0 = MockIsoChronology.dateNow(isoChronology0);
      Driver driver0 = new Driver("?|kf;X:70t3%'JMbe\f", "?|kf;X:70t3%'JMbe\f", "?|kf;X:70t3%'JMbe\f", "?|kf;X:70t3%'JMbe\f", localDate0, 1214.8904, "?|kf;X:70t3%'JMbe\f");
      Car car0 = new Car("!di:4rY;:~6(eeX)", (-1060.07469795195), point2D_Double0, "?|kf;X:70t3%'JMbe\f");
      // Undeclared exception!
      try { 
        uMeR0.newTrip((Client) null, driver0, (Vehicle) car0, point2D_Double0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("UMeR", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      UMeR uMeR0 = new UMeR();
      LocalDate localDate0 = MockLocalDate.ofEpochDay(5048L);
      Client client0 = new Client("h:", (String) null, "Car", "E$6:?\"l8", localDate0);
      Point2D.Double point2D_Double0 = new Point2D.Double(0.0, (byte)25);
      uMeR0.newTripClosest(client0, point2D_Double0);
      assertEquals(0.0, uMeR0.getMoneyGenerated(), 0.01);
      assertEquals(0.0, uMeR0.getTotalTime(), 0.01);
      assertEquals(0.0, uMeR0.getTotalDistance(), 0.01);
      assertEquals(0, uMeR0.getTripID());
      assertEquals(0, uMeR0.getWeather());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      UMeR uMeR0 = new UMeR();
      LocalDate localDate0 = MockLocalDate.ofEpochDay(0L);
      Point2D.Double point2D_Double0 = new Point2D.Double(2557.0, 0L);
      ArrayList<Trip> arrayList0 = new ArrayList<Trip>();
      Client client0 = new Client("\nMatr\u00EDcula ve\u00EDculo : ", "", "", "", localDate0, point2D_Double0, 0.0, arrayList0, 0, 0.0, false, "MvTi)k~@T0I");
      uMeR0.removeUser(client0);
      assertEquals(0.0, uMeR0.getTotalDistance(), 0.01);
      assertEquals(0.0, uMeR0.getTotalTime(), 0.01);
      assertEquals(0, uMeR0.getWeather());
      assertEquals(0.0, uMeR0.getMoneyGenerated(), 0.01);
      assertEquals(0, uMeR0.getTripID());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      UMeR uMeR0 = new UMeR();
      Month month0 = Month.OCTOBER;
      LocalDate localDate0 = MockLocalDate.of(5, month0, 5);
      Boolean boolean0 = Boolean.valueOf("");
      Company company0 = new Company("Company", "\n---------\nFila de Espera : \n");
      ArrayList<Trip> arrayList0 = company0.getTrips();
      Driver driver0 = new Driver("", "32>m2Bo;<?\"4", "", "U", localDate0, 0.2, (-559.153), boolean0, 5, arrayList0, 1311, 0.4, 0.2, "]z^>15]z_S0]RPSl6:", "-%#*)XwAj`", 0.0);
      uMeR0.removeUser(driver0);
      assertEquals(0.0, uMeR0.getTotalDistance(), 0.01);
      assertEquals(0, uMeR0.getWeather());
      assertEquals(0, uMeR0.getTripID());
      assertEquals(0.0, uMeR0.getTotalTime(), 0.01);
      assertEquals(0.0, uMeR0.getMoneyGenerated(), 0.01);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      UMeR uMeR0 = new UMeR();
      Month month0 = Month.JULY;
      LocalDate localDate0 = MockLocalDate.of(0, month0, 4);
      boolean boolean0 = uMeR0.addClient("%<5h_.#5.{&7)&A)^", "vO", "vO", "vO", localDate0);
      assertTrue(boolean0);
      
      boolean boolean1 = uMeR0.addCompany("%<5h_.#5.{&7)&A)^", "%<5h_.#5.{&7)&A)^");
      assertEquals(0.0, uMeR0.getTotalDistance(), 0.01);
      assertFalse(boolean1);
      assertEquals(0.0, uMeR0.getTotalTime(), 0.01);
      assertEquals(0, uMeR0.getWeather());
      assertEquals(0, uMeR0.getTripID());
      assertEquals(0.0, uMeR0.getMoneyGenerated(), 0.01);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      UMeR uMeR0 = new UMeR();
      Point2D.Double point2D_Double0 = new Point2D.Double(0, 0);
      Car car0 = new Car("DINO)", (-2028178998), point2D_Double0, "#yJ[");
      uMeR0.registerVehicleP(car0);
      Clock clock0 = MockClock.systemDefaultZone();
      LocalDate localDate0 = MockLocalDate.now(clock0);
      Driver driver0 = new Driver("DINO)", "#yJ[", "DINO)", "Mota", localDate0, 0.0, "4sCQBK-zGL$");
      double double0 = uMeR0.realTime(point2D_Double0, point2D_Double0, driver0, car0);
      assertEquals(0.0, uMeR0.getMoneyGenerated(), 0.01);
      assertEquals(0.0, uMeR0.getTotalDistance(), 0.01);
      assertEquals(0, uMeR0.getWeather());
      assertEquals(0, uMeR0.getTripID());
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, uMeR0.getTotalTime(), 0.01);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      UMeR uMeR0 = new UMeR();
      LocalDate localDate0 = MockLocalDate.ofEpochDay(5048L);
      boolean boolean0 = uMeR0.addDriver("Helic\u00F3ptero", "E$6:?\"l8", "_B", "_B", localDate0, "I)dwsdr{{8|");
      assertFalse(boolean0);
      assertEquals(0.0, uMeR0.getTotalDistance(), 0.01);
      assertEquals(0, uMeR0.getTripID());
      assertEquals(0, uMeR0.getWeather());
      assertEquals(0.0, uMeR0.getTotalTime(), 0.01);
      assertEquals(0.0, uMeR0.getMoneyGenerated(), 0.01);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      UMeR uMeR0 = new UMeR();
      boolean boolean0 = uMeR0.registerCompany("Helic\u00F3ptero", "E$6:?\"l8");
      assertTrue(boolean0);
      
      LocalDate localDate0 = MockLocalDate.ofEpochDay(5048L);
      boolean boolean1 = uMeR0.addClient("E$6:?\"l8", "Helic\u00F3ptero", "E$6:?\"l8", "E$6:?\"l8", localDate0);
      assertEquals(0.0, uMeR0.getTotalDistance(), 0.01);
      assertEquals(0.0, uMeR0.getMoneyGenerated(), 0.01);
      assertEquals(0.0, uMeR0.getTotalTime(), 0.01);
      assertEquals(0, uMeR0.getWeather());
      assertEquals(0, uMeR0.getTripID());
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      UMeR uMeR0 = new UMeR();
      uMeR0.registerCompany("`ic:BXT<H&s/", "`ic:BXT<H&s/");
      boolean boolean0 = uMeR0.registerCompany("--condutor-mais-pr\u00F3ximo--", "Helic\u00F3ptero");
      assertEquals(0, uMeR0.getTripID());
      assertEquals(0, uMeR0.getWeather());
      assertEquals(0.0, uMeR0.getTotalTime(), 0.01);
      assertEquals(0.0, uMeR0.getMoneyGenerated(), 0.01);
      assertTrue(boolean0);
      assertEquals(0.0, uMeR0.getTotalDistance(), 0.01);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      UMeR uMeR0 = new UMeR();
      Month month0 = Month.JULY;
      LocalDate localDate0 = MockLocalDate.of(0, month0, 4);
      boolean boolean0 = uMeR0.addClient("%<5h_.#5.{&7)&A)^", "vO", "vO", ">$JrJg>~7ma3hmv", localDate0);
      boolean boolean1 = uMeR0.addCompany(">$JrJg>~7ma3hmv", ">$JrJg>~7ma3hmv");
      assertEquals(0, uMeR0.getWeather());
      assertEquals(0, uMeR0.getTripID());
      assertEquals(0.0, uMeR0.getTotalTime(), 0.01);
      assertEquals(0.0, uMeR0.getMoneyGenerated(), 0.01);
      assertTrue(boolean1 == boolean0);
      assertEquals(0.0, uMeR0.getTotalDistance(), 0.01);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      UMeR uMeR0 = new UMeR();
      uMeR0.getDates();
      assertEquals(0.0, uMeR0.getMoneyGenerated(), 0.01);
      assertEquals(0.0, uMeR0.getTotalTime(), 0.01);
      assertEquals(0, uMeR0.getWeather());
      assertEquals(0, uMeR0.getTripID());
      assertEquals(0.0, uMeR0.getTotalDistance(), 0.01);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      UMeR uMeR0 = new UMeR();
      Point2D.Double point2D_Double0 = new Point2D.Double();
      boolean boolean0 = uMeR0.registerCompany("`ic:BXT<H&s/", "`ic:BXT<H&s/");
      assertTrue(boolean0);
      
      uMeR0.newTripSpecific((Client) null, "", point2D_Double0);
      assertEquals(0.0, uMeR0.getTotalDistance(), 0.01);
      assertEquals(0.0, uMeR0.getMoneyGenerated(), 0.01);
      assertEquals(0, uMeR0.getTripID());
      assertEquals(0.0, uMeR0.getTotalTime(), 0.01);
      assertEquals(0, uMeR0.getWeather());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      UMeR uMeR0 = new UMeR();
      ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(9, 9);
      LocalDate localDate0 = MockLocalDate.now((ZoneId) zoneOffset0);
      Point2D.Double point2D_Double0 = new Point2D.Double();
      ArrayList<Trip> arrayList0 = uMeR0.getTrips();
      Client client0 = new Client("", "", "--condutor-mais-pr\u00F3ximo--", "", localDate0, point2D_Double0, 9, arrayList0, 9, 2665.7, false, "0.[u|2Y>E;T");
      uMeR0.newTrip(client0, "0.[u|2Y>E;T", point2D_Double0, point2D_Double0);
      assertEquals(0.0, uMeR0.getTotalDistance(), 0.01);
      assertEquals(0.0, uMeR0.getMoneyGenerated(), 0.01);
      assertEquals(0.0, uMeR0.getTotalTime(), 0.01);
      assertEquals(0, uMeR0.getWeather());
      assertEquals(0, uMeR0.getTripID());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      UMeR uMeR0 = new UMeR();
      uMeR0.getVehiclesP();
      assertEquals(0.0, uMeR0.getMoneyGenerated(), 0.01);
      assertEquals(0.0, uMeR0.getTotalTime(), 0.01);
      assertEquals(0, uMeR0.getWeather());
      assertEquals(0.0, uMeR0.getTotalDistance(), 0.01);
      assertEquals(0, uMeR0.getTripID());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      UMeR uMeR0 = new UMeR();
      uMeR0.getClients();
      assertEquals(0.0, uMeR0.getTotalDistance(), 0.01);
      assertEquals(0, uMeR0.getTripID());
      assertEquals(0, uMeR0.getWeather());
      assertEquals(0.0, uMeR0.getMoneyGenerated(), 0.01);
      assertEquals(0.0, uMeR0.getTotalTime(), 0.01);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      UMeR uMeR0 = new UMeR();
      double double0 = uMeR0.getTotalDistance();
      assertEquals(0, uMeR0.getTripID());
      assertEquals(0, uMeR0.getWeather());
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, uMeR0.getMoneyGenerated(), 0.01);
      assertEquals(0.0, uMeR0.getTotalTime(), 0.01);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      UMeR uMeR0 = new UMeR();
      HashMap<String, Client> hashMap0 = new HashMap<String, Client>();
      uMeR0.setClients(hashMap0);
      assertEquals(0.0, uMeR0.getTotalTime(), 0.01);
      assertEquals(0, uMeR0.getWeather());
      assertEquals(0, uMeR0.getTripID());
      assertEquals(0.0, uMeR0.getTotalDistance(), 0.01);
      assertEquals(0.0, uMeR0.getMoneyGenerated(), 0.01);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      UMeR uMeR0 = new UMeR();
      // Undeclared exception!
      try { 
        uMeR0.cancelTripQueue("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("UMeR", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      UMeR uMeR0 = new UMeR();
      uMeR0.saveUMeR("Muito Bom");
      assertEquals(0.0, uMeR0.getTotalTime(), 0.01);
      assertEquals(0, uMeR0.getWeather());
      assertEquals(0, uMeR0.getTripID());
      assertEquals(0.0, uMeR0.getMoneyGenerated(), 0.01);
      assertEquals(0.0, uMeR0.getTotalDistance(), 0.01);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      UMeR uMeR0 = new UMeR();
      Point2D.Double point2D_Double0 = new Point2D.Double();
      Bike bike0 = new Bike("--condutor-mais-pr\u00F3ximo--", (-1047.2), point2D_Double0, (String) null);
      uMeR0.removeVehicle(bike0);
      assertEquals(0.0, uMeR0.getMoneyGenerated(), 0.01);
      assertEquals(0.0, uMeR0.getTotalDistance(), 0.01);
      assertEquals(0.0, uMeR0.getTotalTime(), 0.01);
      assertEquals(0, uMeR0.getTripID());
      assertEquals(0, uMeR0.getWeather());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      UMeR uMeR0 = new UMeR();
      double double0 = uMeR0.getMoneyGenerated();
      assertEquals(0, uMeR0.getWeather());
      assertEquals(0, uMeR0.getTripID());
      assertEquals(0.0, uMeR0.getTotalTime(), 0.01);
      assertEquals(0.0, uMeR0.getTotalDistance(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      UMeR uMeR0 = new UMeR();
      HashMap<String, Vehicle> hashMap0 = uMeR0.getAllVehicles();
      uMeR0.setVehiclesP(hashMap0);
      assertEquals(0.0, uMeR0.getTotalTime(), 0.01);
      assertEquals(0.0, uMeR0.getMoneyGenerated(), 0.01);
      assertEquals(0.0, uMeR0.getTotalDistance(), 0.01);
      assertEquals(0, uMeR0.getWeather());
      assertEquals(0, uMeR0.getTripID());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      UMeR uMeR0 = new UMeR();
      double double0 = uMeR0.getTotalTime();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, uMeR0.getTotalDistance(), 0.01);
      assertEquals(0.0, uMeR0.getMoneyGenerated(), 0.01);
      assertEquals(0, uMeR0.getTripID());
      assertEquals(0, uMeR0.getWeather());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      UMeR uMeR0 = new UMeR();
      Point2D.Double point2D_Double0 = new Point2D.Double();
      // Undeclared exception!
      try { 
        uMeR0.addQueue("RQZ8SvV=b:/=RMU*mu", "vO", point2D_Double0, point2D_Double0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("UMeR", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      UMeR uMeR0 = new UMeR();
      uMeR0.setWeather((-2028178998));
      assertEquals((-2028178998), uMeR0.getWeather());
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      UMeR uMeR0 = new UMeR();
      uMeR0.setTotalDistance(0.0);
      assertEquals(0.0, uMeR0.getTotalDistance(), 0.01);
      assertEquals(0.0, uMeR0.getMoneyGenerated(), 0.01);
      assertEquals(0.0, uMeR0.getTotalTime(), 0.01);
      assertEquals(0, uMeR0.getWeather());
      assertEquals(0, uMeR0.getTripID());
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      UMeR uMeR0 = new UMeR();
      int int0 = uMeR0.getWeather();
      assertEquals(0.0, uMeR0.getTotalDistance(), 0.01);
      assertEquals(0, uMeR0.getTripID());
      assertEquals(0.0, uMeR0.getMoneyGenerated(), 0.01);
      assertEquals(0, int0);
      assertEquals(0.0, uMeR0.getTotalTime(), 0.01);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      try { 
        UMeR.loadUMeR("0n9jT]MB[ON G<8");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      UMeR uMeR0 = new UMeR();
      String string0 = uMeR0.toString();
      assertEquals(0.0, uMeR0.getMoneyGenerated(), 0.01);
      assertEquals("---Drivers---\n[]\n---Clients---\n[]\n---Vehicles---\n[]\n---Number of trips---\n0", string0);
      assertEquals(0.0, uMeR0.getTotalTime(), 0.01);
      assertEquals(0.0, uMeR0.getTotalDistance(), 0.01);
      assertEquals(0, uMeR0.getWeather());
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      UMeR uMeR0 = new UMeR();
      HashMap<String, Driver> hashMap0 = uMeR0.getAllDrivers();
      uMeR0.setAllDrivers(hashMap0);
      assertEquals(0, uMeR0.getTripID());
      assertEquals(0.0, uMeR0.getTotalTime(), 0.01);
      assertEquals(0, uMeR0.getWeather());
      assertEquals(0.0, uMeR0.getTotalDistance(), 0.01);
      assertEquals(0.0, uMeR0.getMoneyGenerated(), 0.01);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      UMeR uMeR0 = new UMeR();
      // Undeclared exception!
      try { 
        uMeR0.changeDriverVehicle("\nVe\u00EDculo : ", "`ic:BXT<H&s/");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("UMeR", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      UMeR uMeR0 = new UMeR();
      int int0 = uMeR0.getTripID();
      assertEquals(0.0, uMeR0.getTotalDistance(), 0.01);
      assertEquals(0, uMeR0.getWeather());
      assertEquals(0, int0);
      assertEquals(0.0, uMeR0.getMoneyGenerated(), 0.01);
      assertEquals(0.0, uMeR0.getTotalTime(), 0.01);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      UMeR uMeR0 = new UMeR();
      HashMap<String, Driver> hashMap0 = uMeR0.getDriversP();
      uMeR0.setDrivers(hashMap0);
      assertEquals(0.0, uMeR0.getTotalDistance(), 0.01);
      assertEquals(0, uMeR0.getWeather());
      assertEquals(0, uMeR0.getTripID());
      assertEquals(0.0, uMeR0.getTotalTime(), 0.01);
      assertEquals(0.0, uMeR0.getMoneyGenerated(), 0.01);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      UMeR uMeR0 = new UMeR();
      // Undeclared exception!
      try { 
        uMeR0.addRating("Helic\u00F3ptero", 0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("UMeR", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      UMeR uMeR0 = new UMeR();
      LocalDate localDate0 = MockLocalDate.ofYearDay(20, 20);
      Client client0 = new Client((String) null, (String) null, (String) null, (String) null, localDate0);
      ArrayList<Trip> arrayList0 = client0.getTrips();
      uMeR0.setTrips(arrayList0);
      assertEquals(0.0, uMeR0.getTotalDistance(), 0.01);
      assertEquals(0, uMeR0.getWeather());
      assertEquals(0.0, uMeR0.getTotalTime(), 0.01);
      assertEquals(0, uMeR0.getTripID());
      assertEquals(0.0, uMeR0.getMoneyGenerated(), 0.01);
  }
}
