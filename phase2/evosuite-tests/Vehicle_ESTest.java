/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 12 22:27:18 GMT 2018
 */


import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.geom.Point2D;
import java.time.LocalDate;
import java.time.Period;
import java.time.chrono.IsoChronology;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.chrono.MockIsoChronology;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Vehicle_ESTest extends Vehicle_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      Van van0 = new Van("$BnW(", (-1.5748344941316657), point2D_Double0, "V");
      van0.setSpeed(0.0);
      double double0 = van0.getSpeed();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      Car car0 = new Car("j6R&f)pJ&/T?_lk", 0.0, point2D_Double0, "j6R&f)pJ&/T?_lk");
      car0.setSpeed((-507.6116));
      double double0 = car0.getSpeed();
      assertEquals((-507.6116), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double(0.0, 0.0);
      Car car0 = new Car((String) null, 0.0, point2D_Double0, "");
      car0.setSeats(0);
      int int0 = car0.getSeats();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      Van van0 = new Van("&uIC0qDeyne:cW", 0.0, point2D_Double0, "&uIC0qDeyne:cW");
      van0.setSeats((-14));
      int int0 = van0.getSeats();
      assertEquals((-14), int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      Helicopter helicopter0 = new Helicopter("", 0.0, point2D_Double0, "");
      double double0 = helicopter0.getReliable();
      assertEquals(8.5, helicopter0.getPrice(), 0.01);
      assertEquals(110.0, helicopter0.getSpeed(), 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(3, helicopter0.getSeats());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      Bike bike0 = new Bike("KpTELR-6(pSYS@$Hv;", (-1164.4515700428776), point2D_Double0, "\nDura\u00E7\u00E3o prevista : ");
      double double0 = bike0.getReliable();
      assertEquals(1, bike0.getSeats());
      assertEquals((-1164.4515700428776), double0, 0.01);
      assertEquals(0.9, bike0.getPrice(), 0.01);
      assertEquals(75.0, bike0.getSpeed(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double(275.446, 275.446);
      Helicopter helicopter0 = new Helicopter("\nEmail condutor : ", 1.0, point2D_Double0, "\nEmail condutor : ");
      helicopter0.setPrice(0.0);
      double double0 = helicopter0.getPrice();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      Van van0 = new Van("XGC", 378.85929775332113, point2D_Double0, "d;g6;3\"R)o3XmegC");
      van0.setPrice((-1.0));
      double double0 = van0.getPrice();
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      Bike bike0 = new Bike((String) null, 1.0, point2D_Double0, (String) null);
      bike0.getOwner();
      assertEquals(0.9, bike0.getPrice(), 0.01);
      assertEquals(1, bike0.getSeats());
      assertEquals(75.0, bike0.getSpeed(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double((-616.84426738151), 0.0);
      Helicopter helicopter0 = new Helicopter(")\nData : ", 0.0, point2D_Double0, ")\nData : ");
      helicopter0.getOwner();
      assertEquals(110.0, helicopter0.getSpeed(), 0.01);
      assertEquals(8.5, helicopter0.getPrice(), 0.01);
      assertEquals(3, helicopter0.getSeats());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double(0.0, 0.0);
      Car car0 = new Car((String) null, 0.0, point2D_Double0, "");
      car0.getLicencePlate();
      assertEquals(65.0, car0.getSpeed(), 0.01);
      assertEquals(1.5, car0.getPrice(), 0.01);
      assertEquals(4, car0.getSeats());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      Helicopter helicopter0 = new Helicopter("", 396.3179258, point2D_Double0, "l8");
      helicopter0.getLicencePlate();
      assertEquals(8.5, helicopter0.getPrice(), 0.01);
      assertEquals(110.0, helicopter0.getSpeed(), 0.01);
      assertEquals(3, helicopter0.getSeats());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      Van van0 = new Van("XGC", 378.85929775332113, point2D_Double0, "d;g6;3\"R)o3XmegC");
      Car car0 = new Car("nQTd=FL8", 1808.3228768258973, point2D_Double0, "Tipo : class Van\nMatricula : XGC\nVelocidade m\u00E9dia por km : 55.0\nPre\u00E7o m\u00E9dio por km : 1.9\nFator de fiabilidade : 378.85929775332113\nDisponibilidade : true\nNumero de lugares: 9\nPosi\u00E7\u00E3o : (0.0,378.85929775332113)\nOwner : d;g6;3\"R)o3XmegC\n---------\nFila de Espera : \nFila de espera vazia.\n\n");
      van0.equals((Vehicle) car0);
      assertEquals(4, car0.getSeats());
      assertEquals(1.5, car0.getPrice(), 0.01);
      assertEquals(65.0, car0.getSpeed(), 0.01);
      assertEquals(55.0, van0.getSpeed(), 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      Van van0 = new Van(")#vP_6{_<.t_Y<", 55.0, point2D_Double0, ")#vP_6{_<.t_Y<");
      Vehicle vehicle0 = van0.clone();
      assertEquals(9, vehicle0.getSeats());
      assertEquals(1.9, vehicle0.getPrice(), 0.01);
      assertEquals(55.0, van0.getReliable(), 0.01);
      assertEquals(55.0, vehicle0.getSpeed(), 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double((-616.84426738151), 0.0);
      Helicopter helicopter0 = new Helicopter(")\nData : ", 0.0, point2D_Double0, ")\nData : ");
      helicopter0.setReliable((-616.84426738151));
      helicopter0.clone();
      assertEquals((-616.84426738151), helicopter0.getReliable(), 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      Van van0 = new Van("Bike", 1.0, point2D_Double0, "");
      HashMap<String, ArrayList<Point2D.Double>> hashMap0 = van0.getQueueInfo();
      hashMap0.put("", (ArrayList<Point2D.Double>) null);
      // Undeclared exception!
      try { 
        van0.setQueueInfo(hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Vehicle", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double(2825.5, 0.0);
      Car car0 = new Car((String) null, 2825.5, point2D_Double0, (String) null);
      // Undeclared exception!
      try { 
        car0.setPosition((Point2D.Double) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Vehicle", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      Van van0 = new Van("XGC", 378.85929775332113, point2D_Double0, "d;g6;3\"R)o3XmegC");
      Trip trip0 = new Trip();
      van0.addTrip(trip0);
      // Undeclared exception!
      try { 
        van0.moneyGeneratedBetween((LocalDate) null, (LocalDate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.time.chrono.ChronoLocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      Van van0 = new Van("%I10^zi4_", (-1796.735664695362), point2D_Double0, "%I10^zi4_");
      // Undeclared exception!
      try { 
        van0.equals((Vehicle) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Vehicle", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double(0.0, (-1.0));
      Bike bike0 = new Bike("", 0.0, point2D_Double0, "");
      // Undeclared exception!
      try { 
        bike0.addTrip((Trip) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Vehicle", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      Van van0 = new Van(")#vP_6{_<.t_Y<", 55.0, point2D_Double0, ")#vP_6{_<.t_Y<");
      // Undeclared exception!
      try { 
        van0.addClient("\nNumero de lugares: ", (Point2D.Double) null, (Point2D.Double) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Vehicle", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      Bike bike0 = new Bike((String) null, 1.0, point2D_Double0, (String) null);
      String string0 = bike0.printQueue();
      assertEquals(1, bike0.getSeats());
      assertEquals(0.9, bike0.getPrice(), 0.01);
      assertEquals("Fila de espera vazia.", string0);
      assertEquals(75.0, bike0.getSpeed(), 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      Van van0 = new Van("\nDist\u00E2ncia : ", 0.0, point2D_Double0, "");
      ArrayList<Trip> arrayList0 = van0.getTrips();
      Trip trip0 = new Trip();
      arrayList0.add(trip0);
      // Undeclared exception!
      try { 
        van0.setTrips(arrayList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Trip", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      Helicopter helicopter0 = new Helicopter("}", 1695.7325677100428, point2D_Double0, "}");
      helicopter0.setTrips((ArrayList<Trip>) null);
      assertEquals(3, helicopter0.getSeats());
      assertEquals(8.5, helicopter0.getPrice(), 0.01);
      assertEquals(110.0, helicopter0.getSpeed(), 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double(275.446, 275.446);
      Bike bike0 = new Bike("\nEmail condutor : ", 275.446, point2D_Double0, "\nEmail condutor : ");
      bike0.addClient("", point2D_Double0, point2D_Double0);
      Helicopter helicopter0 = new Helicopter("\nEmail condutor : ", 1.0, point2D_Double0, "\nEmail condutor : ");
      HashMap<String, ArrayList<Point2D.Double>> hashMap0 = bike0.getQueueInfo();
      helicopter0.setQueueInfo(hashMap0);
      assertEquals(8.5, helicopter0.getPrice(), 0.01);
      assertEquals(3, helicopter0.getSeats());
      assertFalse(hashMap0.isEmpty());
      assertEquals(110.0, helicopter0.getSpeed(), 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      Helicopter helicopter0 = new Helicopter("|#", (-3938.067310458871), point2D_Double0, "{z`EOXQ s6]");
      helicopter0.setQueueInfo((HashMap<String, ArrayList<Point2D.Double>>) null);
      assertEquals(3, helicopter0.getSeats());
      assertEquals(8.5, helicopter0.getPrice(), 0.01);
      assertEquals(110.0, helicopter0.getSpeed(), 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      Helicopter helicopter0 = new Helicopter("|#", (-3938.067310458871), point2D_Double0, "{z`EOXQ s6]");
      LinkedList<String> linkedList0 = helicopter0.getQueue();
      linkedList0.add("|#");
      helicopter0.setQueue(linkedList0);
      assertEquals(3, helicopter0.getSeats());
      assertEquals(110.0, helicopter0.getSpeed(), 0.01);
      assertEquals(8.5, helicopter0.getPrice(), 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      Helicopter helicopter0 = new Helicopter((String) null, 110.0, point2D_Double0, (String) null);
      helicopter0.setQueue((LinkedList<String>) null);
      assertEquals(110.0, helicopter0.getSpeed(), 0.01);
      assertEquals(8.5, helicopter0.getPrice(), 0.01);
      assertEquals(3, helicopter0.getSeats());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      Van van0 = new Van("XGC", 378.85929775332113, point2D_Double0, "d;g6;3\"R)o3XmegC");
      Trip trip0 = new Trip();
      van0.addTrip(trip0);
      van0.getTrips();
      assertEquals(9, van0.getSeats());
      assertEquals(55.0, van0.getSpeed(), 0.01);
      assertEquals(1.9, van0.getPrice(), 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      Helicopter helicopter0 = new Helicopter("", 0.0, point2D_Double0, "");
      ArrayList<Trip> arrayList0 = helicopter0.getTrips();
      helicopter0.setTrips(arrayList0);
      assertEquals(3, helicopter0.getSeats());
      assertEquals(110.0, helicopter0.getSpeed(), 0.01);
      assertEquals(8.5, helicopter0.getPrice(), 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      Van van0 = new Van("&uIC0qDeyne:cW", 0.0, point2D_Double0, "&uIC0qDeyne:cW");
      van0.isAvailable();
      assertEquals(9, van0.getSeats());
      assertEquals(55.0, van0.getSpeed(), 0.01);
      assertEquals(1.9, van0.getPrice(), 0.01);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      Helicopter helicopter0 = new Helicopter("", 0.0, point2D_Double0, "");
      helicopter0.getPosition();
      assertEquals(110.0, helicopter0.getSpeed(), 0.01);
      assertEquals(3, helicopter0.getSeats());
      assertEquals(8.5, helicopter0.getPrice(), 0.01);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      Car car0 = new Car("kecg]qooHod[)]Z", 0.9, point2D_Double0, "");
      car0.getOwner();
      assertEquals(1.5, car0.getPrice(), 0.01);
      assertEquals(4, car0.getSeats());
      assertEquals(65.0, car0.getSpeed(), 0.01);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      Van van0 = new Van(") ---> (", 1.0, point2D_Double0, ") ---> (");
      van0.getLicencePlate();
      assertEquals(1.9, van0.getPrice(), 0.01);
      assertEquals(9, van0.getSeats());
      assertEquals(55.0, van0.getSpeed(), 0.01);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      Van van0 = new Van("XGC", 378.85929775332113, point2D_Double0, "d;g6;3\"R)o3XmegC");
      double double0 = van0.getReliable();
      assertEquals(1.9, van0.getPrice(), 0.01);
      assertEquals(9, van0.getSeats());
      assertEquals(378.85929775332113, double0, 0.01);
      assertEquals(55.0, van0.getSpeed(), 0.01);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      Van van0 = new Van("&uIC0qDeyne:cW", 0.0, point2D_Double0, "&uIC0qDeyne:cW");
      Trip trip0 = new Trip();
      van0.addTrip(trip0);
      Period period0 = Period.ZERO;
      IsoChronology isoChronology0 = period0.getChronology();
      LocalDate localDate0 = MockIsoChronology.dateNow(isoChronology0);
      int int0 = van0.moneyGeneratedBetween(localDate0, localDate0);
      assertEquals(9, van0.getSeats());
      assertEquals(55.0, van0.getSpeed(), 0.01);
      assertEquals(0, int0);
      assertEquals(1.9, van0.getPrice(), 0.01);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      Van van0 = new Van("&uIC0qDeyne:cW", 0.0, point2D_Double0, "&uIC0qDeyne:cW");
      van0.addClient("&uIC0qDeyne:cW", point2D_Double0, point2D_Double0);
      String string0 = van0.printQueue();
      assertEquals(1.9, van0.getPrice(), 0.01);
      assertEquals("1\u00BA lugar :&uIC0qDeyne:cW\n", string0);
      assertEquals(9, van0.getSeats());
      assertEquals(55.0, van0.getSpeed(), 0.01);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      Van van0 = new Van("&uIC0qDeyne:cW", 0.0, point2D_Double0, "&uIC0qDeyne:cW");
      van0.addClient("&uIC0qDeyne:cW", point2D_Double0, point2D_Double0);
      Vehicle vehicle0 = van0.clone();
      assertEquals(55.0, vehicle0.getSpeed(), 0.01);
      assertEquals(0.0, van0.getReliable(), 0.01);
      assertEquals(9, vehicle0.getSeats());
      assertEquals(1.9, vehicle0.getPrice(), 0.01);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      Van van0 = new Van("&uIC0qDeyne:cW", 0.0, point2D_Double0, "&uIC0qDeyne:cW");
      van0.addClient("&uIC0qDeyne:cW", point2D_Double0, point2D_Double0);
      LinkedList<String> linkedList0 = van0.getQueue();
      assertEquals(55.0, van0.getSpeed(), 0.01);
      assertEquals(1.9, van0.getPrice(), 0.01);
      assertEquals(9, van0.getSeats());
      assertTrue(linkedList0.contains("&uIC0qDeyne:cW"));
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      Van van0 = new Van("XGC", 378.85929775332113, point2D_Double0, "d;g6;3\"R)o3XmegC");
      String string0 = van0.toString();
      assertEquals("Tipo : class Van\nMatricula : XGC\nVelocidade m\u00E9dia por km : 55.0\nPre\u00E7o m\u00E9dio por km : 1.9\nFator de fiabilidade : 378.85929775332113\nDisponibilidade : true\nNumero de lugares: 9\nPosi\u00E7\u00E3o : (0.0,0.0)\nOwner : d;g6;3\"R)o3XmegC\n---------\nFila de Espera : \nFila de espera vazia.\n\n", string0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      Van van0 = new Van("XGC", 378.85929775332113, point2D_Double0, "d;g6;3\"R)o3XmegC");
      van0.setLicencePlate("Vrip");
      assertEquals(1.9, van0.getPrice(), 0.01);
      assertEquals(9, van0.getSeats());
      assertEquals(55.0, van0.getSpeed(), 0.01);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double(275.446, 275.446);
      Helicopter helicopter0 = new Helicopter("\nEmail condutor : ", 1.0, point2D_Double0, "\nEmail condutor : ");
      double double0 = helicopter0.getPrice();
      assertEquals(3, helicopter0.getSeats());
      assertEquals(110.0, helicopter0.getSpeed(), 0.01);
      assertEquals(8.5, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      Van van0 = new Van("&uIC0qDeyne:cW", 0.0, point2D_Double0, "&uIC0qDeyne:cW");
      van0.setAvailable(false);
      boolean boolean0 = van0.isAvailable();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double(1.0, 1.0);
      Van van0 = new Van("&uIC0qDeyne:cW", 1.0, point2D_Double0, "&uIC0qDeyne:cW");
      int int0 = van0.getSeats();
      assertEquals(1.9, van0.getPrice(), 0.01);
      assertEquals(55.0, van0.getSpeed(), 0.01);
      assertEquals(9, int0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      Van van0 = new Van("&uIC0qDeyne:cW", 0.0, point2D_Double0, "&uIC0qDeyne:cW");
      van0.removeClient("&uIC0qDeyne:cW");
      assertEquals(55.0, van0.getSpeed(), 0.01);
      assertEquals(1.9, van0.getPrice(), 0.01);
      assertEquals(9, van0.getSeats());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      Van van0 = new Van("&uIC0qDeyne:cW", 0.0, point2D_Double0, "&uIC0qDeyne:cW");
      van0.setOwner("&uIC0qDeyne:cW");
      assertEquals(55.0, van0.getSpeed(), 0.01);
      assertEquals(9, van0.getSeats());
      assertEquals(1.9, van0.getPrice(), 0.01);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      Helicopter helicopter0 = new Helicopter((String) null, 110.0, point2D_Double0, (String) null);
      helicopter0.setPosition(point2D_Double0);
      assertEquals(110.0, helicopter0.getSpeed(), 0.01);
      assertEquals(3, helicopter0.getSeats());
      assertEquals(8.5, helicopter0.getPrice(), 0.01);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      Van van0 = new Van("\nMatr(Fula ve\u00EDculo : ", (-1.574834494132), point2D_Double0, "\nMatr(Fula ve\u00EDculo : ");
      double double0 = van0.getSpeed();
      assertEquals(55.0, double0, 0.01);
      assertEquals(9, van0.getSeats());
      assertEquals(1.9, van0.getPrice(), 0.01);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      Van van0 = new Van("\nMatr(Fula ve\u00EDculo : ", (-1.574834494132), point2D_Double0, "\nMatr(Fula ve\u00EDculo : ");
      van0.equals((Vehicle) van0);
      assertEquals(9, van0.getSeats());
      assertEquals(1.9, van0.getPrice(), 0.01);
      assertEquals(55.0, van0.getSpeed(), 0.01);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      Van van0 = new Van("&uIC0qDeyne:cW", 0.0, point2D_Double0, "&uIC0qDeyne:cW");
      Trip trip0 = new Trip();
      van0.addTrip(trip0);
      // Undeclared exception!
      try { 
        van0.clone();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Trip", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Bike bike0 = null;
      try {
        bike0 = new Bike();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
