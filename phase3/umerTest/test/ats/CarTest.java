/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 04 16:41:47 GMT 2018
 */

package ats;
import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.geom.Point2D;
import java.util.HashMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CarTest  {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      Car car0 = new Car("Y\"XT`", 0.0, point2D_Double0, "h:");
      HashMap<String, Vehicle> hashMap0 = new HashMap<String, Vehicle>();
      point2D_Double0.y = (double) 2;
      Bike bike0 = new Bike("Y\"XT`", 2.0, point2D_Double0, "Y\"XT`");
      hashMap0.put("Y\"XT`", bike0);
      int int0 = car0.calculateTraffic(hashMap0);
      assertEquals(1.5, car0.getPrice(), 0.01);
      assertEquals(2, int0);
      assertEquals(65.0, car0.getSpeed(), 0.01);
      assertEquals(4, car0.getSeats());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      Car car0 = new Car("Y\"XT`", 0.0, point2D_Double0, "h:");
      Car car1 = car0.clone();
      assertEquals(1.5, car1.getPrice(), 0.01);
      assertEquals(65.0, car0.getSpeed(), 0.01);
      assertEquals(4, car0.getSeats());
      assertEquals(1.5, car0.getPrice(), 0.01);
      assertEquals(65.0, car1.getSpeed(), 0.01);
      assertEquals(4, car1.getSeats());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      Car car0 = new Car("Car", (-1743.7106), point2D_Double0, "");
      Car car1 = car0.clone();
      assertEquals(4, car1.getSeats());
      assertEquals(65.0, car0.getSpeed(), 0.01);
      assertEquals(1.5, car0.getPrice(), 0.01);
      assertEquals(1.5, car1.getPrice(), 0.01);
      assertEquals(4, car0.getSeats());
      assertEquals(65.0, car1.getSpeed(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double(57.87179889, 1680.8017776);
      Car car0 = new Car("Car", 57.87179889, point2D_Double0, "");
      Trip trip0 = new Trip();
      car0.addTrip(trip0);
      // Undeclared exception!
      try { 
        car0.clone();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
//         verifyException("Trip", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      Bike bike0 = new Bike("X>ev :SeP#^iAL", (-1968.4738861575374), point2D_Double0, "X>ev :SeP#^iAL");
      // Undeclared exception!
      try { 
        bike0.clone();
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double(0.0, 0.0);
      Car car0 = new Car("|;}63'dQwn\"", 0.0, point2D_Double0, "|;}63'dQwn\"");
      // Undeclared exception!
      try { 
        car0.calculateTraffic((HashMap<String, Vehicle>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
//         verifyException("Car", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Car car0 = null;
      try {
        car0 = new Car((Car) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         //verifyException("Car", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      Car car0 = new Car("Rm.Hs\"e)8>2M$Jo89,h", 2.0, point2D_Double0, "Rm.Hs\"e)8>2M$Jo89,h");
      Car car1 = new Car(car0);
      assertEquals(4, car1.getSeats());
      assertEquals(1.5, car1.getPrice(), 0.01);
      assertEquals(4, car0.getSeats());
      assertEquals(1.5, car0.getPrice(), 0.01);
      assertEquals(65.0, car1.getSpeed(), 0.01);
      assertEquals(65.0, car0.getSpeed(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      Car car0 = new Car("X>ME :SeP#iAL", 5.062822271654063, point2D_Double0, "X>ME :SeP#iAL");
      point2D_Double0.y = 5.062822271654063;
      HashMap<String, Vehicle> hashMap0 = new HashMap<String, Vehicle>();
      Bike bike0 = new Bike("X>ME :SeP#iAL", 5.062822271654063, point2D_Double0, "X>ME :SeP#iAL");
      hashMap0.put("X>ME :SeP#iAL", bike0);
      int int0 = car0.calculateTraffic(hashMap0);
      assertEquals(4, car0.getSeats());
      assertEquals(1.5, car0.getPrice(), 0.01);
      assertEquals(65.0, car0.getSpeed(), 0.01);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      Car car0 = new Car("X>ME :SeP#iAL", 5.062822271654063, point2D_Double0, "X>ME :SeP#iAL");
      HashMap<String, Vehicle> hashMap0 = new HashMap<String, Vehicle>();
      hashMap0.put("X>ME :SeP#iAL", car0);
      int int0 = car0.calculateTraffic(hashMap0);
      int speed= 65;
      double price =1.5;
      int seats=4;
      int trafego=2;
      assertEquals(price, car0.getPrice(), 0.01);
      assertEquals(trafego, int0);
      assertEquals(speed, car0.getSpeed(), 0.01);
      assertEquals(seats, car0.getSeats());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      Car car0 = new Car("X>ME :SeP#iAL", 5.062822271654063, point2D_Double0, "X>ME :SeP#iAL");
      Car car1 = car0.clone();
      assertEquals(1.5, car0.getPrice(), 0.01);
      assertEquals(1.5, car1.getPrice(), 0.01);
      assertEquals(4, car1.getSeats());
      assertEquals(65.0, car1.getSpeed(), 0.01);
      assertEquals(4, car0.getSeats());
      assertEquals(65.0, car0.getSpeed(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Car car0 = null;
      try {
        car0 = new Car("", (-1.0), (Point2D.Double) null, "q^^; b.\"ya^n#{>w");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
        // verifyException("Vehicle", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Car car0 = null;
      try {
        car0 = new Car();
      //  fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
    @Test(timeout = 4000)
    public void test13()  throws Throwable  {

      int x = 0;




    }
}
